var fs = require('fs');
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        (function (Primitive) {
            // list to hold all primitives. TODO: check if good idea?
            var primitives = {};

            /** Stores a primitive function (used to replace reflection) */
            function store(name, func, pattMatch) {
                primitives[name] = {
                    type: "primitive",
                    name: name,
                    subr: {
                        type: "func",
                        arity: func.length - 1,
                        apply: function (args, nargs, base) {
                            var theArgs = [primitives[name]];
                            GeomJS.Common.arraycopy(args, base, theArgs, 1, func.length - 1);
                            return func.apply(null, theArgs);
                        },
                        pattMatch: function (obj, nargs) {
                            return null;
                        }
                    }
                };

                if (pattMatch) {
                    primitives[name].pattMatch = pattMatch;
                }
            }
            Primitive.store = store;

            function find(name) {
                return primitives[name];
            }
            Primitive.find = find;
        })(Funbase.Primitive || (Funbase.Primitive = {}));
        var Primitive = Funbase.Primitive;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Bootstrap) {
        var truth = { "type": "boolvalue", name: "true", value: true };
        var falsity = { "type": "boolvalue", name: "false", value: false };
        Bootstrap.nameTable = {
            "++": { "type": "funcode", "name": "++", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 0, 13, 1, 22, 3, 13, 1, 22, 2, 22, 24, 22, 24, 15, 10], "rands": [0, 5, 134217728, 1, 134217728, 0, 25, 134217728, 0, 134217728, 1, 0, 2, 0, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [{ "type": "name", "name": ":" }] },
            "__top": {
                "type": "funcode", "name": "__top", "arity": 0, "fsize": 92, "ssize": 13, "ops": [6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 0, 13, 6, 22, 24, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 0, 13, 1, 22, 1, 22, 24, 5, 0, 13, 1, 22, 1, 22, 24, 5, 0, 13, 1, 22, 1, 22, 24, 5, 0, 13, 1, 22, 1, 22, 24, 5, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 0, 13, 6, 22, 24, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 0, 13, 1, 22, 1, 22, 24, 5, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 25, 4, 6, 14, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 25, 4, 1, 15], "rands": [0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 0, 2, 3, 0, 0, 3, 4, 0, 0, 4, 5, 0, 0, 5, 6, 0, 0, 6, 7, 0, 0, 7, 8, 1, 9, 0, 1, 8, 8, 1, 9, 0, 1, 9, 10, 5, 6, 1, 8, 2, 3, 3, 4, 4, 9, 5, 5, 10, 11, 1, 1, 1, 1, 11, 12, 1, 8, 1, 1, 12, 13, 3, 12, 1, 10, 2, 7, 3, 3, 13, 14, 2, 12, 1, 10, 2, 2, 14, 15, 1, 8, 1, 1, 15, 16, 2, 9, 1, 13, 2, 2, 16, 17, 1, 13, 1, 1, 17, 18, 1, 13, 1, 1, 18, 19, 1, 14, 1, 1, 19, 20, 1, 19, 1, 1, 20, 21, 2, 12, 1, 20, 2, 2, 21, 8, 1, 9, 0, 1, 22, 22, 1, 22, 1, 1, 23, 23, 1, 23, 1, 1, 24, 8, 1, 9, 0, 1, 25, 24, 1, 25, 1, 1, 26, 8, 1, 9, 0, 1, 27, 25, 1, 27, 1, 1, 28, 8, 1, 9, 0, 1, 29, 26, 1, 29, 1, 1, 30, 27, 0, 0, 31, 28, 2, 21, 1, 28, 2, 2, 32, 29, 9, 6, 1, 28, 2, 17, 3, 13, 4, 32, 5, 18, 6, 12, 7, 16, 8, 15, 9, 9, 33, 30, 2, 33, 1, 14, 2, 2, 34, 31, 3, 16, 1, 14, 2, 34, 3, 3, 35, 32, 2, 18, 1, 32, 2, 2, 36, 33, 2, 21, 1, 24, 2, 2, 37, 34, 0, 0, 38, 35, 3, 28, 1, 13, 2, 24, 3, 3, 39, 36, 4, 15, 1, 13, 2, 24, 3, 39, 4, 4, 40, 37, 7, 12, 1, 24, 2, 40, 3, 38, 4, 13, 5, 19, 6, 15, 7, 7, 41, 38, 7, 11, 1, 8, 2, 23, 3, 16, 4, 12, 5, 26, 6, 4, 7, 7, 42, 39, 9, 6, 1, 41, 2, 42, 3, 17, 4, 37, 5, 18, 6, 12, 7, 16, 8, 15, 9, 9, 43, 40, 5, 43, 1, 12, 2, 13, 3, 16, 4, 15, 5, 5, 44, 41, 0, 0, 45, 42, 10, 45, 1, 4, 2, 26, 3, 12, 4, 13, 5, 3, 6, 9, 7, 11, 8, 8, 9, 44, 10, 10, 46, 43, 3, 14, 1, 13, 2, 26, 3, 3, 47, 44, 7, 14, 1, 47, 2, 36, 3, 24, 4, 30, 5, 13, 6, 15, 7, 7, 48, 45, 4, 11, 1, 8, 2, 12, 3, 16, 4, 4, 49, 46, 3, 13, 1, 24, 2, 14, 3, 3, 50, 47, 4, 49, 1, 6, 2, 36, 3, 50, 4, 4, 51, 48, 8, 49, 1, 12, 2, 13, 3, 24, 4, 36, 5, 50, 6, 19, 7, 51, 8, 8, 52, 49, 5, 12, 1, 14, 2, 30, 3, 24, 4, 6, 5, 5, 53, 50, 2, 22, 0, 48, 1, 2, 134217728, 50, 2, 25, 0, 46, 1, 2, 134217728, 50, 2, 27, 0, 35, 1, 2, 134217728, 50, 2, 29, 0, 52, 1, 2, 134217728, 51, 2, 10, 1, 53, 2, 2, 54, 52, 0, 0, 55, 53, 1, 5, 1, 1, 56, 54, 0, 0, 57, 55, 0, 0, 58, 56, 0, 0, 59, 57, 0, 0, 60, 58, 0, 0, 61, 59, 0, 0, 62, 60, 0, 0, 63, 61, 0, 0, 64, 62, 0, 0, 65, 63, 0, 0, 66, 64, 3, 63, 1, 65, 2, 64, 3, 3, 67, 65, 2, 66, 1, 64, 2, 2, 68, 66, 0, 0, 69, 67, 2, 60, 1, 57, 2, 2, 70, 68, 2, 60, 1, 57, 2, 2, 71, 69, 0, 0, 72, 8, 1, 9, 0, 1, 73, 70, 1, 73, 1, 1, 74, 71, 4, 65, 1, 69, 2, 60, 3, 57, 4, 4, 75, 72, 0, 0, 76, 73, 2, 3, 1, 4, 2, 2, 77, 74, 7, 74, 1, 77, 2, 70, 3, 75, 4, 67, 5, 2, 6, 31, 7, 7, 78, 75, 4, 70, 1, 65, 2, 77, 3, 78, 4, 4, 79, 76, 3, 79, 1, 3, 2, 4, 3, 3, 80, 8, 1, 9, 0, 1, 81, 77, 6, 81, 1, 80, 2, 72, 3, 3, 4, 4, 5, 74, 6, 6, 82, 78, 0, 0, 83, 79, 5, 82, 1, 4, 2, 3, 3, 76, 4, 83, 5, 5, 84, 80, 8, 59, 1, 55, 2, 84, 3, 62, 4, 0, 5, 56, 6, 2, 7, 75, 8, 8, 85, 81, 0, 0, 86, 82, 12, 86, 1, 75, 2, 71, 3, 61, 4, 2, 5, 74, 6, 65, 7, 66, 8, 67, 9, 68, 10, 85, 11, 31, 12, 12, 87, 50, 2, 81, 0, 87, 1, 2, 134217728, 83, 5, 55, 1, 84, 2, 59, 3, 0, 4, 56, 5, 5, 88, 84, 4, 57, 1, 65, 2, 66, 3, 88, 4, 4, 89, 85, 3, 89, 1, 58, 2, 88, 3, 3, 90, 86, 5, 54, 1, 0, 2, 73, 3, 89, 4, 90, 5, 5, 91, 91, 134217728], "consts": [
                    {
                        "type": "funcode", "name": "debug", "arity": 2, "fsize": 0, "ssize": 3, "ops": [0, 13, 0, 13, 24, 22, 2, 22, 24, 11, 0, 13, 2, 22, 24, 15, 7, 15], "rands": [0, 2, 1, 0, 0, 0, 0, 1, 2, 16, 2, 1, 1, 0, 1, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": ">" },
                            { "type": "name", "name": "_debug" },
                            { "type": "name", "name": "_print" }]
                    },
                    {
                        "type": "funcode", "name": "member", "arity": 2, "fsize": 2, "ssize": 3, "ops": [2, 9, 18, 0, 15, 2, 9, 19, 4, 20, 4, 0, 13, 2, 22, 1, 22, 24, 11, 6, 15, 2, 1, 21, 10], "rands": [1, 5, 134217728, 0, 134217728, 1, 24, 134217728, 0, 134217728, 1, 1, 2, 0, 0, 0, 1, 2, 21, 2, 134217728, 0, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "false" },
                            { "type": "name", "name": "=" },
                            truth]
                    },
                    {
                        "type": "funcode", "name": "number", "arity": 2, "fsize": 2, "ssize": 6, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 4, 20, 4, 0, 13, 2, 1, 7, 8, 8, 22, 3, 13, 0, 13, 2, 22, 6, 22, 24, 22, 1, 22, 24, 22, 24, 15, 10], "rands": [1, 5, 134217728, 134217728, 134217728, 1, 35, 134217728, 0, 134217728, 1, 0, 2, 0, 0, 134217728, 134217728, 134217728, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "+" },
                            { "type": "number", "value": 1 }]
                    },
                    { "type": "funcode", "name": "fst", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 4, 5, 1, 15, 10], "rands": [0, 7, 134217728, 0, 134217728, 0, 134217728, 134217728] },
                    { "type": "funcode", "name": "snd", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 5, 20, 9, 19, 4, 5, 1, 15, 10], "rands": [0, 11, 134217728, 134217728, 134217728, 11, 134217728, 0, 134217728, 0, 134217728, 134217728] },
                    { "type": "funcode", "name": "max", "arity": 2, "fsize": 0, "ssize": 3, "ops": [0, 13, 2, 22, 2, 22, 24, 11, 2, 15, 2, 15], "rands": [0, 2, 0, 0, 1, 1, 2, 10, 0, 134217728, 1, 134217728], "consts": [{ "type": "name", "name": ">" }] },
                    { "type": "funcode", "name": "synerror", "arity": 1, "fsize": 0, "ssize": 3, "ops": [0, 13, 2, 22, 7, 22, 24, 15], "rands": [0, 2, 0, 0, 134217728, 1, 2, 134217728], "consts": [{ "type": "name", "name": "_synerror" }] },
                    {
                        "type": "funcode", "name": "describe", "arity": 1, "fsize": 0, "ssize": 5, "ops": [2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 2, 9, 6, 17, 6, 15, 0, 13, 0, 13, 6, 22, 0, 13, 2, 22, 24, 22, 24, 22, 6, 22, 24, 15], "rands": [0, 6, 0, 134217728, 1, 134217728, 0, 12, 2, 134217728, 3, 134217728, 0, 18, 4, 134217728, 5, 134217728, 0, 24, 6, 134217728, 7, 134217728, 0, 30, 8, 134217728, 9, 134217728, 0, 36, 10, 134217728, 11, 134217728, 0, 42, 12, 134217728, 13, 134217728, 0, 48, 14, 134217728, 15, 134217728, 0, 54, 16, 134217728, 17, 134217728, 0, 60, 18, 134217728, 19, 134217728, 0, 66, 20, 134217728, 21, 134217728, 0, 72, 22, 134217728, 23, 134217728, 0, 78, 24, 134217728, 25, 134217728, 0, 84, 26, 134217728, 27, 134217728, 0, 90, 28, 134217728, 29, 134217728, 0, 96, 30, 134217728, 31, 134217728, 0, 102, 32, 134217728, 33, 134217728, 0, 108, 34, 134217728, 35, 134217728, 0, 114, 36, 134217728, 37, 134217728, 38, 2, 38, 2, 39, 0, 40, 1, 0, 0, 1, 1, 2, 0, 39, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "ident" },
                            { "type": "string", "value": "an identifier" },
                            { "type": "name", "name": "number" },
                            { "type": "string", "value": "a number" },
                            { "type": "name", "name": "atom" },
                            { "type": "string", "value": "an atom" },
                            { "type": "name", "name": "lpar" },
                            { "type": "string", "value": "'('" },
                            { "type": "name", "name": "rpar" },
                            { "type": "string", "value": "')'" },
                            { "type": "name", "name": "comma" },
                            { "type": "string", "value": "','" },
                            { "type": "name", "name": "semi" },
                            { "type": "string", "value": "';'" },
                            { "type": "name", "name": "bra" },
                            { "type": "string", "value": "'['" },
                            { "type": "name", "name": "ket" },
                            { "type": "string", "value": "']'" },
                            { "type": "name", "name": "vbar" },
                            { "type": "string", "value": "'|'" },
                            { "type": "name", "name": ">>" },
                            { "type": "string", "value": "'>>'" },
                            { "type": "name", "name": ".." },
                            { "type": "string", "value": "'..'" },
                            { "type": "name", "name": "string" },
                            { "type": "string", "value": "a string constant" },
                            { "type": "name", "name": "binop" },
                            { "type": "string", "value": "a binary operator" },
                            { "type": "name", "name": "monop" },
                            { "type": "string", "value": "a unary operator" },
                            { "type": "name", "name": "lbrace" },
                            { "type": "string", "value": "'{'" },
                            { "type": "name", "name": "rbrace" },
                            { "type": "string", "value": "'}'" },
                            { "type": "name", "name": "eol" },
                            { "type": "string", "value": "end of line" },
                            { "type": "name", "name": "eof" },
                            { "type": "string", "value": "end of input" },
                            { "type": "name", "name": "^" },
                            { "type": "string", "value": "'" },
                            { "type": "name", "name": "_spelling" }]
                    },
                    { "type": "name", "name": "_new" },
                    { "type": "number", "value": 0 },
                    {
                        "type": "funcode", "name": "scan", "arity": 0, "fsize": 2, "ssize": 6, "ops": [0, 13, 24, 4, 6, 14, 3, 23, 1, 23, 3, 23, 3, 23, 3, 23, 25, 4, 1, 13, 3, 13, 1, 22, 24, 22, 24, 5, 0, 13, 3, 22, 3, 13, 1, 22, 24, 22, 24, 15], "rands": [0, 0, 0, 0, 1, 5, 4, 1, 0, 2, 3, 3, 2, 4, 1, 5, 5, 1, 1, 1, 3, 1, 0, 0, 1, 0, 1, 134217728, 2, 2, 5, 0, 4, 1, 0, 0, 1, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "_scan" },
                            {
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 5, "ops": [2, 9, 6, 17, 0, 13, 0, 22, 3, 13, 3, 22, 24, 22, 24, 4, 0, 13, 3, 22, 0, 13, 1, 22, 7, 22, 24, 11, 3, 13, 1, 22, 24, 12, 6, 22, 24, 15, 2, 9, 6, 17, 0, 13, 0, 22, 3, 13, 3, 22, 24, 22, 24, 4, 0, 13, 1, 22, 7, 22, 24, 11, 0, 13, 3, 22, 3, 13, 1, 22, 24, 22, 24, 15, 3, 13, 6, 22, 24, 15, 0, 13, 3, 22, 2, 22, 24, 15], "rands": [0, 38, 0, 134217728, 1, 2, 2, 0, 1, 1, 2, 0, 1, 1, 2, 0, 3, 2, 4, 0, 4, 2, 0, 0, 134217728, 1, 2, 34, 3, 1, 0, 0, 1, 35, 0, 1, 2, 134217728, 0, 80, 5, 134217728, 1, 2, 2, 0, 1, 1, 2, 0, 1, 1, 2, 0, 4, 2, 0, 0, 134217728, 1, 2, 74, 3, 2, 4, 0, 3, 1, 0, 0, 1, 1, 2, 134217728, 5, 1, 6, 0, 1, 134217728, 3, 2, 4, 0, 0, 1, 2, 134217728], "consts": [
                                    { "type": "name", "name": "ident" },
                                    { "type": "name", "name": "_lookup" },
                                    { "type": "name", "name": "_syntax" },
                                    { "type": "name", "name": "_set" },
                                    { "type": "name", "name": "<>" },
                                    { "type": "name", "name": "op" },
                                    { "type": "string", "value": "#badtok" }]
                            },
                            { "type": "name", "name": "_set" }]
                    },
                    {
                        "type": "funcode", "name": "isbinop", "arity": 1, "fsize": 0, "ssize": 8, "ops": [3, 13, 2, 22, 6, 6, 6, 6, 6, 7, 8, 8, 8, 8, 8, 22, 24, 15], "rands": [1, 2, 0, 0, 0, 1, 2, 3, 4, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "binop" },
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "-" },
                            { "type": "name", "name": "+" },
                            { "type": "name", "name": ":" }]
                    },
                    {
                        "type": "funcode", "name": "see", "arity": 1, "fsize": 0, "ssize": 3, "ops": [0, 13, 0, 13, 3, 22, 24, 22, 2, 22, 24, 15], "rands": [0, 2, 1, 1, 1, 0, 1, 0, 0, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "eat", "arity": 1, "fsize": 0, "ssize": 4, "ops": [3, 13, 2, 22, 24, 11, 3, 13, 24, 15, 0, 13, 6, 22, 3, 13, 2, 22, 24, 7, 8, 22, 24, 15], "rands": [1, 1, 0, 0, 1, 10, 2, 0, 0, 134217728, 0, 2, 1, 0, 3, 1, 0, 0, 1, 134217728, 134217728, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "_synerror" },
                            { "type": "string", "value": "#eat" }]
                    },
                    {
                        "type": "funcode", "name": "can_eat", "arity": 1, "fsize": 0, "ssize": 2, "ops": [3, 13, 2, 22, 24, 11, 3, 13, 24, 5, 0, 15, 0, 15], "rands": [1, 1, 0, 0, 1, 12, 2, 0, 0, 134217728, 0, 134217728, 1, 134217728], "consts": [
                            { "type": "name", "name": "true" },
                            { "type": "name", "name": "false" }]
                    },
                    { "type": "funcode", "name": "whichever", "arity": 1, "fsize": 0, "ssize": 3, "ops": [2, 13, 0, 13, 3, 22, 24, 22, 24, 15], "rands": [0, 1, 0, 1, 1, 0, 1, 0, 1, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "p_sym", "arity": 1, "fsize": 1, "ssize": 2, "ops": [0, 13, 3, 22, 24, 4, 3, 13, 2, 22, 24, 5, 1, 15], "rands": [0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 1, 134217728, 0, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "brack", "arity": 3, "fsize": 1, "ssize": 2, "ops": [3, 13, 2, 22, 24, 5, 2, 13, 24, 4, 3, 13, 2, 22, 24, 5, 1, 15], "rands": [1, 1, 0, 0, 1, 134217728, 1, 0, 0, 0, 1, 1, 2, 0, 1, 134217728, 0, 134217728] },
                    { "type": "funcode", "name": "brack1", "arity": 3, "fsize": 1, "ssize": 2, "ops": [3, 13, 2, 22, 24, 5, 2, 13, 2, 22, 24, 4, 3, 13, 2, 22, 24, 5, 1, 15], "rands": [1, 1, 0, 0, 1, 134217728, 1, 1, 2, 0, 1, 0, 1, 1, 2, 0, 1, 134217728, 0, 134217728] },
                    { "type": "funcode", "name": "p_tail", "arity": 2, "fsize": 1, "ssize": 5, "ops": [3, 13, 2, 22, 24, 11, 2, 13, 24, 4, 0, 13, 1, 22, 3, 13, 2, 22, 2, 22, 24, 22, 24, 15, 7, 15], "rands": [1, 1, 1, 0, 1, 24, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 2, 134217728, 134217728, 134217728], "consts": [{ "type": "name", "name": ":" }] },
                    {
                        "type": "funcode", "name": "p_list1", "arity": 1, "fsize": 1, "ssize": 5, "ops": [2, 13, 24, 4, 0, 13, 1, 22, 3, 13, 2, 22, 6, 22, 24, 22, 24, 15], "rands": [0, 0, 0, 0, 0, 2, 0, 0, 1, 2, 0, 0, 1, 1, 2, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "comma" }]
                    },
                    {
                        "type": "funcode", "name": "p_list", "arity": 2, "fsize": 0, "ssize": 2, "ops": [3, 13, 2, 22, 24, 11, 6, 12, 3, 13, 6, 22, 24, 11, 7, 15, 3, 13, 2, 22, 24, 15], "rands": [1, 1, 1, 0, 1, 8, 0, 13, 1, 1, 1, 0, 1, 16, 134217728, 134217728, 2, 1, 0, 0, 1, 134217728], "consts": [
                            truth,
                            { "type": "name", "name": "eof" }]
                    },
                    { "type": "funcode", "name": "p_expr0", "arity": 1, "fsize": 1, "ssize": 2, "ops": [0, 13, 3, 22, 24, 4, 1, 13, 2, 22, 24, 15], "rands": [0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "p_expr", "arity": 0, "fsize": 0, "ssize": 2, "ops": [3, 13, 0, 22, 24, 15], "rands": [1, 1, 0, 0, 1, 134217728], "consts": [{ "type": "name", "name": "false" }] },
                    { "type": "funcode", "name": "p_term", "arity": 2, "fsize": 1, "ssize": 3, "ops": [0, 13, 3, 22, 24, 4, 1, 13, 2, 22, 2, 22, 24, 15], "rands": [0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 1, 1, 2, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "p_pattern", "arity": 0, "fsize": 1, "ssize": 2, "ops": [0, 13, 3, 22, 24, 4, 1, 13, 24, 15], "rands": [0, 1, 1, 0, 1, 0, 0, 0, 0, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "p_defn", "arity": 0, "fsize": 1, "ssize": 2, "ops": [0, 13, 3, 22, 24, 4, 1, 13, 24, 15], "rands": [0, 1, 1, 0, 1, 0, 0, 0, 0, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    {
                        "type": "funcode", "name": "listify", "arity": 1, "fsize": 0, "ssize": 4, "ops": [0, 13, 6, 14, 25, 22, 6, 7, 8, 22, 2, 22, 24, 15], "rands": [0, 3, 1, 0, 0, 0, 2, 134217728, 134217728, 1, 0, 2, 3, 134217728], "consts": [
                            { "type": "name", "name": "foldr" },
                            { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 0, "ssize": 4, "ops": [6, 2, 2, 7, 8, 8, 8, 15], "rands": [0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [{ "type": "name", "name": "cons" }] },
                            { "type": "name", "name": "nil" }]
                    },
                    { "type": "funcode", "name": "p_patterns", "arity": 1, "fsize": 0, "ssize": 3, "ops": [3, 13, 3, 22, 2, 22, 24, 15], "rands": [1, 2, 2, 0, 0, 1, 2, 134217728] },
                    {
                        "type": "funcode", "name": "p_patprim", "arity": 0, "fsize": 1, "ssize": 9, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [0, 8, 8, 1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 2, 7, 1, 8, 8, 0, 9, 1, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 8, "ops": [2, 9, 6, 17, 3, 13, 6, 22, 24, 4, 0, 13, 3, 13, 6, 22, 24, 22, 24, 11, 6, 1, 7, 8, 8, 15, 0, 13, 6, 22, 0, 13, 1, 22, 3, 13, 6, 22, 3, 22, 6, 22, 24, 22, 24, 22, 24, 15, 2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 6, 7, 8, 15, 2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 6, 0, 13, 3, 13, 6, 22, 24, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 3, 22, 6, 22, 24, 15, 2, 9, 6, 17, 0, 13, 6, 22, 3, 13, 6, 22, 3, 22, 6, 22, 24, 22, 24, 15, 3, 13, 6, 22, 24, 15], "rands": [0, 48, 0, 134217728, 1, 1, 0, 0, 1, 0, 1, 1, 2, 1, 2, 0, 1, 0, 1, 26, 3, 0, 134217728, 134217728, 134217728, 134217728, 4, 2, 5, 0, 4, 2, 0, 0, 3, 3, 2, 0, 4, 1, 6, 2, 3, 1, 2, 1, 2, 134217728, 0, 62, 7, 134217728, 8, 1, 1, 7, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 76, 9, 134217728, 5, 1, 9, 0, 1, 134217728, 10, 134217728, 134217728, 134217728, 0, 90, 11, 134217728, 8, 1, 1, 11, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 114, 12, 134217728, 5, 1, 12, 0, 1, 134217728, 8, 13, 1, 1, 1, 11, 0, 1, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 128, 14, 134217728, 8, 1, 1, 14, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 142, 2, 134217728, 6, 3, 2, 0, 7, 1, 6, 2, 3, 134217728, 0, 162, 15, 134217728, 4, 2, 16, 0, 3, 3, 15, 0, 4, 1, 17, 2, 3, 1, 2, 134217728, 8, 1, 18, 0, 1, 134217728], "consts": [
                                    { "type": "name", "name": "ident" },
                                    { "type": "name", "name": "not" },
                                    { "type": "name", "name": "lpar" },
                                    { "type": "name", "name": "var" },
                                    { "type": "name", "name": ":" },
                                    { "type": "name", "name": "prim" },
                                    { "type": "name", "name": "rpar" },
                                    { "type": "name", "name": "atom" },
                                    { "type": "name", "name": "const" },
                                    { "type": "name", "name": "_" },
                                    { "type": "name", "name": "anon" },
                                    { "type": "name", "name": "number" },
                                    { "type": "name", "name": "-" },
                                    { "type": "name", "name": "_uminus" },
                                    { "type": "name", "name": "string" },
                                    { "type": "name", "name": "bra" },
                                    { "type": "name", "name": "list" },
                                    { "type": "name", "name": "ket" },
                                    { "type": "string", "value": "#pattern" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_patfactor", "arity": 0, "fsize": 1, "ssize": 4, "ops": [3, 13, 24, 4, 3, 13, 6, 22, 24, 11, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15, 1, 15], "rands": [1, 0, 0, 0, 2, 1, 0, 0, 1, 20, 1, 0, 0, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728], "consts": [
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "cons" }]
                    },
                    {
                        "type": "funcode", "name": "p_pattern_body", "arity": 0, "fsize": 1, "ssize": 3, "ops": [6, 14, 3, 23, 3, 23, 25, 4, 1, 13, 3, 13, 24, 22, 24, 15], "rands": [0, 2, 2, 1, 1, 2, 2, 0, 0, 1, 3, 0, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "chain", "arity": 1, "fsize": 0, "ssize": 4, "ops": [3, 13, 6, 22, 24, 11, 6, 2, 3, 13, 6, 22, 24, 7, 8, 8, 8, 21, 2, 15], "rands": [1, 1, 0, 0, 1, 18, 1, 0, 2, 1, 2, 0, 1, 134217728, 134217728, 134217728, 134217728, 1, 0, 134217728], "consts": [
                                    { "type": "name", "name": "+" },
                                    { "type": "name", "name": "plus" },
                                    { "type": "name", "name": "number" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_formals", "arity": 0, "fsize": 0, "ssize": 4, "ops": [3, 13, 6, 22, 3, 22, 6, 22, 24, 15], "rands": [1, 3, 0, 0, 2, 1, 1, 2, 3, 134217728], "consts": [
                            { "type": "name", "name": "lpar" },
                            { "type": "name", "name": "rpar" }]
                    },
                    { "type": "funcode", "name": "p_exprs", "arity": 1, "fsize": 0, "ssize": 3, "ops": [3, 13, 3, 22, 2, 22, 24, 15], "rands": [1, 2, 2, 0, 0, 1, 2, 134217728] },
                    {
                        "type": "funcode", "name": "expand", "arity": 3, "fsize": 4, "ssize": 9, "ops": [2, 9, 18, 6, 2, 2, 7, 8, 8, 8, 15, 2, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 20, 4, 6, 0, 13, 24, 7, 8, 8, 4, 6, 6, 6, 7, 8, 8, 6, 6, 6, 1, 7, 8, 8, 1, 7, 8, 8, 3, 13, 2, 22, 1, 22, 1, 22, 24, 7, 8, 8, 7, 8, 7, 8, 8, 8, 1, 2, 7, 8, 8, 8, 8, 8, 15, 5, 5, 5, 2, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 4, 6, 0, 13, 24, 7, 8, 8, 4, 6, 6, 6, 7, 8, 8, 6, 6, 1, 1, 7, 8, 8, 3, 13, 2, 22, 1, 22, 1, 22, 24, 7, 8, 8, 6, 7, 8, 1, 7, 8, 8, 1, 7, 8, 8, 7, 8, 8, 7, 8, 8, 8, 1, 2, 7, 8, 8, 8, 8, 8, 15, 5, 5, 2, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 20, 4, 6, 1, 3, 13, 2, 22, 1, 22, 2, 22, 24, 2, 7, 8, 8, 8, 8, 15, 5, 5, 10], "rands": [1, 11, 134217728, 0, 0, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 98, 134217728, 97, 134217728, 96, 1, 134217728, 134217728, 97, 134217728, 96, 134217728, 95, 2, 134217728, 134217728, 96, 134217728, 0, 134217728, 96, 134217728, 134217728, 97, 134217728, 1, 134217728, 97, 134217728, 134217728, 2, 2, 3, 0, 0, 134217728, 134217728, 134217728, 3, 4, 2, 5, 134217728, 134217728, 134217728, 6, 7, 2, 0, 134217728, 134217728, 134217728, 3, 134217728, 134217728, 134217728, 0, 3, 0, 0, 2, 1, 3, 2, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 181, 134217728, 180, 134217728, 179, 1, 134217728, 134217728, 180, 134217728, 0, 134217728, 180, 134217728, 1, 134217728, 180, 134217728, 134217728, 2, 2, 3, 0, 0, 134217728, 134217728, 134217728, 3, 4, 2, 5, 134217728, 134217728, 134217728, 6, 7, 0, 3, 134217728, 134217728, 134217728, 0, 3, 0, 0, 2, 1, 3, 2, 3, 134217728, 134217728, 134217728, 8, 134217728, 134217728, 3, 134217728, 134217728, 134217728, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 218, 134217728, 217, 134217728, 216, 9, 134217728, 134217728, 217, 134217728, 0, 134217728, 217, 134217728, 134217728, 1, 10, 0, 0, 3, 0, 0, 1, 1, 2, 2, 3, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "cons" },
                            { "type": "name", "name": "gen" },
                            { "type": "name", "name": "var" },
                            { "type": "name", "name": "_gensym" },
                            { "type": "name", "name": "apply" },
                            { "type": "name", "name": "_mapa" },
                            { "type": "name", "name": "function" },
                            { "type": "number", "value": 2 },
                            { "type": "name", "name": "anon" },
                            { "type": "name", "name": "when" },
                            { "type": "name", "name": "if" }]
                    },
                    {
                        "type": "funcode", "name": "p_gen", "arity": 0, "fsize": 1, "ssize": 4, "ops": [3, 13, 24, 4, 3, 13, 6, 22, 24, 5, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15], "rands": [1, 0, 0, 0, 2, 1, 0, 0, 1, 134217728, 1, 0, 3, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "<-" },
                            { "type": "name", "name": "gen" }]
                    },
                    {
                        "type": "funcode", "name": "p_gens", "arity": 0, "fsize": 2, "ssize": 5, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 24, 4, 0, 13, 1, 22, 1, 13, 24, 22, 24, 15], "rands": [0, 4, 4, 1, 3, 2, 2, 3, 1, 4, 4, 0, 4, 0, 0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "p_tail", "arity": 0, "fsize": 1, "ssize": 5, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [0, 4, 3, 1, 2, 2, 0, 3, 1, 4, 4, 0, 4, 1, 0, 0, 1, 134217728], "consts": [{
                                        "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 4, "ops": [2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 0, 13, 6, 1, 7, 8, 8, 22, 3, 13, 24, 22, 24, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 0, 13, 1, 22, 3, 13, 24, 22, 24, 15, 7, 15], "rands": [0, 28, 0, 134217728, 1, 1, 0, 0, 1, 134217728, 2, 0, 0, 0, 1, 2, 0, 0, 134217728, 134217728, 134217728, 0, 3, 0, 0, 1, 2, 134217728, 0, 52, 2, 134217728, 1, 1, 2, 0, 1, 134217728, 4, 0, 0, 0, 1, 2, 0, 0, 3, 0, 0, 1, 2, 134217728, 134217728, 134217728], "consts": [
                                            { "type": "name", "name": "when" },
                                            { "type": "name", "name": ":" },
                                            { "type": "name", "name": "comma" }]
                                    }]
                            },
                            { "type": "name", "name": ":" }]
                    },
                    {
                        "type": "funcode", "name": "p_listexp", "arity": 0, "fsize": 2, "ssize": 7, "ops": [3, 13, 6, 22, 24, 11, 6, 7, 8, 15, 3, 13, 24, 4, 6, 14, 3, 23, 3, 23, 1, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [1, 1, 0, 0, 1, 10, 1, 134217728, 134217728, 134217728, 2, 0, 0, 0, 2, 6, 6, 1, 2, 2, 0, 3, 5, 4, 4, 5, 3, 6, 6, 1, 7, 1, 1, 0, 1, 134217728], "consts": [
                            { "type": "name", "name": "ket" },
                            { "type": "name", "name": "nil" },
                            {
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 0, "ssize": 7, "ops": [2, 9, 6, 17, 0, 13, 6, 22, 0, 13, 3, 22, 3, 13, 3, 22, 6, 22, 24, 22, 24, 22, 24, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 6, 6, 6, 7, 8, 8, 3, 3, 13, 24, 7, 8, 8, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 3, 22, 3, 13, 24, 22, 6, 7, 8, 22, 24, 15, 6, 3, 7, 8, 8, 15], "rands": [0, 24, 0, 134217728, 1, 2, 2, 0, 1, 2, 3, 0, 1, 2, 2, 0, 0, 1, 2, 1, 2, 1, 2, 134217728, 0, 50, 3, 134217728, 4, 1, 3, 0, 1, 134217728, 4, 5, 6, 134217728, 134217728, 134217728, 3, 2, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 74, 7, 134217728, 4, 1, 7, 0, 1, 134217728, 5, 3, 3, 0, 6, 0, 0, 1, 8, 134217728, 134217728, 2, 3, 134217728, 2, 3, 134217728, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "comma" },
                                    { "type": "name", "name": ":" },
                                    { "type": "name", "name": "list" },
                                    { "type": "name", "name": ".." },
                                    { "type": "name", "name": "apply" },
                                    { "type": "name", "name": "var" },
                                    { "type": "name", "name": "_range" },
                                    { "type": "name", "name": "vbar" },
                                    { "type": "name", "name": "nil" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_parenexp", "arity": 0, "fsize": 2, "ssize": 6, "ops": [0, 13, 3, 13, 0, 13, 3, 22, 24, 22, 24, 22, 24, 11, 3, 13, 0, 22, 24, 15, 3, 13, 0, 13, 3, 22, 24, 22, 24, 4, 0, 13, 1, 22, 24, 4, 3, 13, 6, 22, 24, 11, 6, 1, 7, 8, 8, 15, 6, 6, 6, 7, 8, 8, 6, 1, 7, 8, 8, 3, 13, 3, 13, 1, 22, 24, 22, 0, 22, 24, 7, 8, 8, 8, 8, 15], "rands": [0, 1, 1, 1, 1, 1, 2, 0, 1, 0, 1, 0, 1, 20, 3, 1, 2, 0, 1, 134217728, 4, 1, 1, 1, 2, 0, 1, 0, 1, 0, 3, 1, 0, 0, 1, 1, 5, 1, 4, 0, 1, 48, 5, 0, 134217728, 134217728, 134217728, 134217728, 6, 5, 7, 134217728, 134217728, 134217728, 5, 0, 134217728, 134217728, 134217728, 6, 2, 7, 1, 1, 0, 1, 0, 8, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "not" },
                            { "type": "name", "name": "_get" },
                            { "type": "name", "name": "true" },
                            { "type": "name", "name": "_priority" },
                            { "type": "name", "name": "rpar" },
                            { "type": "name", "name": "var" },
                            { "type": "name", "name": "apply" },
                            { "type": "name", "name": "_rsect" },
                            { "type": "name", "name": "false" }]
                    },
                    {
                        "type": "funcode", "name": "p_primary", "arity": 0, "fsize": 1, "ssize": 9, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [0, 8, 8, 1, 7, 2, 6, 3, 5, 4, 4, 5, 3, 6, 2, 7, 1, 8, 8, 0, 9, 1, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 8, "ops": [2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 4, 0, 13, 3, 13, 6, 22, 24, 22, 24, 11, 6, 1, 7, 8, 8, 15, 0, 13, 6, 22, 0, 13, 6, 1, 7, 8, 8, 22, 3, 13, 6, 22, 3, 22, 6, 22, 24, 22, 24, 22, 24, 15, 2, 9, 6, 17, 3, 13, 6, 22, 3, 22, 6, 22, 24, 15, 2, 9, 6, 17, 3, 13, 6, 22, 3, 22, 6, 22, 24, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 15, 3, 13, 6, 22, 24, 15], "rands": [0, 14, 0, 134217728, 1, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 28, 2, 134217728, 1, 1, 1, 2, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 42, 3, 134217728, 1, 1, 1, 3, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 94, 4, 134217728, 1, 1, 4, 0, 1, 0, 5, 1, 2, 1, 6, 0, 1, 0, 1, 68, 7, 0, 134217728, 134217728, 134217728, 134217728, 8, 2, 9, 0, 8, 2, 7, 0, 134217728, 134217728, 134217728, 0, 3, 3, 6, 0, 4, 1, 10, 2, 3, 1, 2, 1, 2, 134217728, 0, 108, 6, 134217728, 5, 3, 6, 0, 6, 1, 10, 2, 3, 134217728, 0, 122, 11, 134217728, 5, 3, 11, 0, 7, 1, 12, 2, 3, 134217728, 0, 132, 13, 134217728, 8, 1, 14, 0, 1, 134217728, 8, 1, 15, 0, 1, 134217728], "consts": [
                                    { "type": "name", "name": "number" },
                                    { "type": "name", "name": "const" },
                                    { "type": "name", "name": "atom" },
                                    { "type": "name", "name": "string" },
                                    { "type": "name", "name": "ident" },
                                    { "type": "name", "name": "not" },
                                    { "type": "name", "name": "lpar" },
                                    { "type": "name", "name": "var" },
                                    { "type": "name", "name": ":" },
                                    { "type": "name", "name": "apply" },
                                    { "type": "name", "name": "rpar" },
                                    { "type": "name", "name": "bra" },
                                    { "type": "name", "name": "ket" },
                                    { "type": "name", "name": "eof" },
                                    { "type": "string", "value": "#exp" },
                                    { "type": "string", "value": "#badexp" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_factor", "arity": 0, "fsize": 1, "ssize": 6, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [0, 5, 4, 1, 0, 2, 3, 3, 2, 4, 1, 5, 5, 0, 5, 1, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 4, "ops": [2, 9, 6, 17, 6, 3, 13, 6, 22, 24, 7, 8, 8, 4, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 6, 22, 24, 11, 6, 0, 13, 3, 13, 6, 22, 24, 22, 24, 7, 8, 8, 15, 6, 6, 6, 7, 8, 8, 3, 13, 24, 7, 8, 8, 8, 15, 3, 13, 24, 15], "rands": [0, 24, 0, 134217728, 1, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 0, 2, 0, 2, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 68, 3, 134217728, 3, 1, 3, 0, 1, 134217728, 4, 1, 4, 0, 1, 54, 5, 6, 1, 1, 1, 4, 0, 1, 0, 1, 134217728, 134217728, 134217728, 134217728, 2, 1, 6, 134217728, 134217728, 134217728, 2, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 5, 0, 0, 134217728], "consts": [
                                    { "type": "name", "name": "monop" },
                                    { "type": "name", "name": "var" },
                                    { "type": "name", "name": "apply" },
                                    { "type": "name", "name": "-" },
                                    { "type": "name", "name": "number" },
                                    { "type": "name", "name": "const" },
                                    { "type": "name", "name": "_uminus" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "makebin", "arity": 3, "fsize": 1, "ssize": 4, "ops": [6, 14, 2, 23, 2, 23, 2, 23, 25, 4, 1, 13, 2, 22, 24, 15], "rands": [0, 3, 1, 1, 2, 2, 0, 3, 3, 0, 0, 1, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 0, "ssize": 6, "ops": [2, 9, 6, 17, 6, 3, 3, 6, 0, 7, 8, 8, 7, 8, 8, 8, 8, 15, 2, 9, 6, 17, 6, 3, 6, 0, 7, 8, 8, 3, 7, 8, 8, 8, 8, 15, 6, 6, 3, 7, 8, 8, 3, 3, 7, 8, 8, 8, 8, 15], "rands": [0, 18, 0, 134217728, 1, 1, 2, 2, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 36, 4, 134217728, 1, 1, 2, 5, 134217728, 134217728, 134217728, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 6, 7, 3, 134217728, 134217728, 134217728, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "and" },
                                    { "type": "name", "name": "if" },
                                    { "type": "name", "name": "const" },
                                    { "type": "name", "name": "false" },
                                    { "type": "name", "name": "or" },
                                    { "type": "name", "name": "true" },
                                    { "type": "name", "name": "apply" },
                                    { "type": "name", "name": "var" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_term_body", "arity": 2, "fsize": 1, "ssize": 11, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 2, 23, 3, 23, 3, 23, 3, 23, 3, 23, 25, 4, 1, 13, 3, 13, 24, 22, 2, 22, 24, 15], "rands": [0, 10, 9, 1, 8, 2, 7, 3, 6, 4, 5, 5, 1, 6, 4, 7, 3, 8, 2, 9, 1, 10, 10, 0, 0, 2, 10, 0, 0, 0, 0, 1, 2, 134217728], "consts": [{
                                "type": "funcode", "name": "p_termcont", "arity": 2, "fsize": 4, "ssize": 5, "ops": [0, 13, 3, 22, 24, 4, 0, 13, 3, 13, 1, 22, 24, 22, 24, 11, 2, 15, 0, 13, 3, 22, 24, 4, 0, 13, 1, 22, 24, 4, 0, 13, 3, 13, 1, 22, 24, 22, 2, 22, 24, 11, 2, 15, 3, 13, 1, 22, 24, 5, 3, 11, 3, 13, 6, 22, 24, 12, 6, 11, 6, 6, 6, 7, 8, 8, 6, 1, 7, 8, 8, 2, 7, 8, 8, 8, 8, 15, 3, 13, 3, 13, 1, 22, 24, 22, 0, 22, 24, 4, 3, 13, 1, 22, 2, 22, 1, 22, 24, 2, 21], "rands": [0, 1, 1, 0, 1, 0, 1, 1, 2, 1, 0, 0, 1, 0, 1, 18, 0, 134217728, 0, 1, 3, 0, 1, 1, 2, 1, 1, 0, 1, 2, 3, 2, 4, 1, 2, 0, 1, 0, 1, 1, 2, 44, 0, 134217728, 5, 1, 0, 0, 1, 134217728, 6, 58, 7, 1, 4, 0, 1, 59, 5, 78, 6, 7, 8, 134217728, 134217728, 134217728, 7, 1, 134217728, 134217728, 134217728, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 8, 2, 9, 1, 2, 0, 1, 0, 9, 1, 2, 3, 10, 3, 1, 0, 0, 1, 3, 2, 3, 1, 2], "consts": [
                                    { "type": "name", "name": "_get" },
                                    { "type": "name", "name": "not" },
                                    { "type": "name", "name": "_priority" },
                                    { "type": "name", "name": "<" },
                                    { "type": "name", "name": "rpar" },
                                    falsity,
                                    { "type": "name", "name": "apply" },
                                    { "type": "name", "name": "var" },
                                    { "type": "name", "name": "_lsect" },
                                    { "type": "name", "name": "false" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_cond", "arity": 1, "fsize": 3, "ssize": 5, "ops": [3, 13, 6, 22, 24, 11, 3, 13, 0, 22, 24, 4, 3, 13, 6, 22, 24, 5, 3, 13, 0, 22, 24, 4, 3, 13, 6, 22, 24, 5, 3, 13, 0, 22, 24, 4, 6, 1, 1, 1, 7, 8, 8, 8, 8, 15, 3, 13, 6, 22, 2, 22, 24, 15], "rands": [1, 1, 0, 0, 1, 46, 0, 1, 1, 0, 1, 0, 2, 1, 2, 0, 1, 134217728, 0, 1, 1, 0, 1, 1, 2, 1, 3, 0, 1, 134217728, 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 3, 2, 4, 0, 0, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "if" },
                            { "type": "name", "name": "false" },
                            { "type": "name", "name": "then" },
                            { "type": "name", "name": "else" },
                            { "type": "number", "value": 1 }]
                    },
                    {
                        "type": "funcode", "name": "p_expr_body", "arity": 1, "fsize": 1, "ssize": 8, "ops": [6, 14, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 2, 23, 3, 23, 25, 4, 3, 13, 1, 22, 24, 15], "rands": [0, 7, 6, 1, 5, 2, 4, 3, 3, 4, 2, 5, 0, 6, 1, 7, 7, 0, 7, 1, 0, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 5, "ops": [2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 3, 13, 6, 22, 24, 5, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15, 2, 9, 6, 17, 3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 6, 0, 13, 1, 22, 24, 1, 3, 13, 24, 7, 8, 8, 7, 8, 7, 8, 8, 8, 15, 3, 13, 3, 22, 24, 4, 3, 13, 6, 22, 24, 11, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15, 1, 15], "rands": [0, 30, 0, 134217728, 1, 1, 0, 0, 1, 134217728, 2, 0, 0, 0, 1, 1, 1, 0, 1, 134217728, 0, 0, 3, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 64, 2, 134217728, 1, 1, 2, 0, 1, 134217728, 4, 0, 0, 0, 2, 3, 1, 0, 0, 1, 0, 3, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 5, 1, 6, 0, 1, 0, 7, 1, 4, 0, 1, 86, 5, 0, 3, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728], "consts": [
                                    { "type": "name", "name": "let" },
                                    { "type": "name", "name": "in" },
                                    { "type": "name", "name": "function" },
                                    { "type": "name", "name": "length" },
                                    { "type": "name", "name": ">>" },
                                    { "type": "name", "name": "seq" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "p_name", "arity": 0, "fsize": 0, "ssize": 3, "ops": [3, 13, 0, 13, 3, 22, 24, 22, 24, 11, 6, 12, 3, 13, 6, 22, 24, 11, 3, 13, 0, 13, 3, 22, 24, 22, 24, 15, 3, 13, 6, 22, 24, 15], "rands": [1, 1, 0, 1, 2, 0, 1, 0, 1, 12, 1, 17, 3, 1, 2, 0, 1, 28, 4, 1, 0, 1, 2, 0, 1, 0, 1, 134217728, 4, 1, 3, 0, 1, 134217728], "consts": [
                            { "type": "name", "name": "_get" },
                            truth,
                            { "type": "name", "name": "monop" },
                            { "type": "name", "name": "ident" }]
                    },
                    {
                        "type": "funcode", "name": "p_rhs", "arity": 1, "fsize": 1, "ssize": 4, "ops": [3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 3, 13, 6, 22, 24, 11, 2, 3, 13, 24, 1, 7, 8, 8, 8, 15, 2, 1, 7, 8, 8, 15], "rands": [1, 1, 0, 0, 1, 134217728, 2, 0, 0, 0, 3, 1, 1, 0, 1, 26, 0, 2, 0, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 0, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "when" }]
                    },
                    {
                        "type": "funcode", "name": "p_rule", "arity": 2, "fsize": 2, "ssize": 3, "ops": [3, 13, 24, 4, 0, 13, 2, 22, 1, 22, 24, 11, 7, 12, 3, 13, 6, 22, 24, 5, 3, 13, 24, 4, 0, 13, 0, 13, 1, 22, 24, 22, 2, 22, 24, 11, 7, 12, 3, 13, 6, 22, 24, 5, 3, 13, 1, 22, 24, 15], "rands": [1, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 14, 134217728, 19, 2, 1, 1, 0, 1, 134217728, 3, 0, 0, 1, 0, 2, 2, 1, 1, 0, 1, 0, 1, 1, 2, 38, 134217728, 43, 2, 1, 3, 0, 1, 134217728, 4, 1, 1, 0, 1, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "string", "value": "#names" },
                            { "type": "name", "name": "length" },
                            { "type": "string", "value": "#arity" }]
                    },
                    {
                        "type": "funcode", "name": "p_defn_body", "arity": 0, "fsize": 4, "ssize": 10, "ops": [3, 13, 24, 4, 0, 13, 3, 13, 6, 22, 24, 22, 24, 11, 3, 13, 6, 22, 24, 5, 6, 1, 3, 13, 24, 7, 8, 8, 8, 15, 3, 13, 24, 4, 0, 13, 1, 22, 24, 4, 3, 13, 1, 22, 24, 4, 6, 1, 1, 0, 13, 1, 22, 3, 13, 6, 14, 3, 23, 1, 23, 1, 23, 25, 22, 6, 22, 24, 22, 24, 7, 8, 8, 8, 8, 15], "rands": [1, 0, 0, 0, 0, 1, 2, 1, 1, 0, 1, 0, 1, 30, 3, 1, 2, 0, 1, 134217728, 3, 0, 4, 0, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 5, 0, 0, 1, 4, 1, 1, 0, 1, 2, 6, 1, 1, 0, 1, 3, 5, 0, 2, 6, 2, 3, 0, 7, 2, 7, 3, 8, 1, 2, 2, 0, 3, 3, 0, 8, 1, 2, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "not" },
                            { "type": "name", "name": "lpar" },
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "val" },
                            { "type": "name", "name": "length" },
                            { "type": "name", "name": "fun" },
                            { "type": "name", "name": ":" },
                            { "type": "funcode", "name": "<function>", "arity": 0, "fsize": 0, "ssize": 3, "ops": [3, 13, 3, 22, 3, 22, 24, 15], "rands": [1, 2, 3, 0, 2, 1, 2, 134217728] },
                            { "type": "name", "name": "vbar" }]
                    },
                    {
                        "type": "funcode", "name": "p_para", "arity": 0, "fsize": 1, "ssize": 3, "ops": [3, 13, 6, 22, 24, 11, 6, 15, 3, 13, 6, 22, 24, 11, 3, 13, 24, 12, 3, 13, 24, 4, 3, 13, 6, 22, 24, 11, 3, 13, 6, 22, 24, 12, 3, 13, 6, 22, 24, 11, 3, 13, 6, 22, 24, 12, 0, 13, 3, 13, 6, 22, 24, 22, 24, 11, 0, 13, 3, 13, 6, 22, 24, 22, 24, 12, 6, 11, 3, 13, 6, 22, 24, 12, 7, 5, 1, 15], "rands": [1, 1, 0, 0, 1, 8, 0, 134217728, 2, 1, 1, 0, 1, 18, 3, 0, 0, 21, 4, 0, 0, 0, 1, 1, 2, 0, 1, 34, 5, 1, 3, 0, 1, 75, 1, 1, 4, 0, 1, 46, 5, 1, 5, 0, 1, 75, 6, 1, 1, 1, 7, 0, 1, 0, 1, 66, 6, 1, 1, 1, 0, 0, 1, 0, 1, 67, 8, 74, 5, 1, 9, 0, 1, 75, 134217728, 134217728, 0, 134217728], "consts": [
                            { "type": "name", "name": "eof" },
                            { "type": "name", "name": "define" },
                            { "type": "name", "name": "rpar" },
                            { "type": "string", "value": "#parenmatch" },
                            { "type": "name", "name": "ket" },
                            { "type": "string", "value": "#bramatch" },
                            { "type": "name", "name": "not" },
                            { "type": "name", "name": "semi" },
                            falsity,
                            { "type": "string", "value": "#junk" }]
                    },
                    { "type": "name", "name": "_set" },
                    { "type": "funcode", "name": "parser", "arity": 0, "fsize": 0, "ssize": 1, "ops": [3, 13, 24, 5, 3, 13, 24, 15], "rands": [1, 0, 0, 134217728, 2, 0, 0, 134217728] },
                    {
                        "type": "funcode", "name": "flatten", "arity": 1, "fsize": 1, "ssize": 3, "ops": [6, 14, 25, 4, 1, 13, 2, 22, 7, 22, 24, 15], "rands": [0, 0, 0, 0, 0, 2, 0, 0, 134217728, 1, 2, 134217728], "consts": [{
                                "type": "funcode", "name": "flat", "arity": 2, "fsize": 1, "ssize": 4, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 9, 6, 17, 20, 4, 0, 13, 3, 22, 2, 22, 1, 22, 24, 15, 5, 0, 13, 2, 22, 2, 22, 24, 15], "rands": [0, 5, 134217728, 1, 134217728, 0, 24, 134217728, 23, 0, 134217728, 134217728, 0, 1, 3, 0, 0, 1, 1, 0, 2, 3, 134217728, 134217728, 2, 2, 0, 0, 1, 1, 2, 134217728], "consts": [
                                    { "type": "name", "name": "seq" },
                                    { "type": "name", "name": "foldr" },
                                    { "type": "name", "name": ":" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "assemble", "arity": 3, "fsize": 10, "ssize": 10, "ops": [0, 13, 6, 22, 24, 4, 0, 13, 6, 22, 24, 4, 0, 13, 24, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 3, 23, 1, 23, 1, 23, 25, 4, 0, 13, 6, 14, 1, 23, 3, 23, 1, 23, 25, 22, 6, 22, 2, 22, 24, 5, 0, 13, 24, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 6, 14, 1, 23, 25, 4, 0, 13, 2, 22, 2, 22, 0, 13, 1, 22, 24, 22, 0, 13, 1, 22, 24, 22, 1, 13, 1, 13, 6, 22, 2, 22, 7, 22, 24, 22, 24, 22, 24, 15], "rands": [0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 2, 0, 0, 2, 3, 1, 2, 1, 1, 3, 4, 4, 2, 1, 1, 2, 1, 3, 3, 4, 4, 4, 5, 3, 6, 3, 4, 1, 1, 2, 0, 3, 3, 0, 1, 1, 2, 2, 3, 134217728, 2, 0, 0, 5, 7, 1, 5, 1, 1, 6, 8, 1, 5, 1, 1, 7, 9, 1, 6, 1, 1, 8, 10, 1, 8, 1, 1, 9, 11, 5, 0, 0, 1, 1, 12, 1, 1, 0, 1, 2, 12, 1, 0, 0, 1, 3, 9, 1, 7, 3, 1, 0, 2, 1, 134217728, 2, 3, 0, 1, 4, 5, 134217728], "consts": [
                            { "type": "name", "name": "_new" },
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": "_hash" },
                            { "type": "funcode", "name": "setlab", "arity": 2, "fsize": 0, "ssize": 4, "ops": [0, 13, 3, 22, 2, 22, 2, 22, 24, 15], "rands": [0, 3, 1, 0, 0, 1, 1, 2, 3, 134217728], "consts": [{ "type": "name", "name": "_update" }] },
                            {
                                "type": "funcode", "name": "visit", "arity": 2, "fsize": 1, "ssize": 6, "ops": [0, 13, 2, 22, 24, 11, 0, 13, 3, 22, 2, 22, 24, 4, 0, 13, 1, 22, 7, 22, 24, 11, 1, 15, 2, 15, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 0, 13, 3, 22, 3, 13, 0, 13, 1, 22, 6, 22, 24, 22, 0, 13, 3, 22, 24, 22, 24, 22, 24, 5, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 0, 13, 2, 22, 6, 22, 24, 22, 24, 5, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 0, 13, 2, 22, 6, 22, 24, 22, 24, 5, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 2, 22, 24, 5, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 5, 20, 9, 18, 2, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 0, 13, 2, 22, 1, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 0, 13, 2, 22, 1, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 0, 13, 0, 13, 2, 22, 1, 22, 24, 22, 6, 22, 24, 15, 5, 10], "rands": [0, 1, 1, 0, 1, 26, 1, 2, 1, 0, 1, 1, 2, 0, 2, 2, 0, 0, 134217728, 1, 2, 24, 0, 134217728, 0, 134217728, 1, 48, 134217728, 47, 3, 134217728, 134217728, 48, 134217728, 134217728, 134217728, 48, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 70, 134217728, 69, 6, 134217728, 134217728, 70, 134217728, 134217728, 134217728, 70, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 92, 134217728, 91, 7, 134217728, 134217728, 92, 134217728, 134217728, 134217728, 92, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 114, 134217728, 113, 8, 134217728, 134217728, 114, 134217728, 134217728, 134217728, 114, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 160, 134217728, 159, 9, 134217728, 134217728, 160, 134217728, 0, 134217728, 160, 134217728, 10, 2, 3, 0, 2, 2, 4, 2, 0, 0, 5, 1, 2, 0, 11, 1, 3, 0, 1, 1, 2, 1, 2, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 178, 134217728, 177, 13, 134217728, 134217728, 178, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 200, 134217728, 199, 14, 134217728, 134217728, 200, 134217728, 134217728, 134217728, 200, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 218, 134217728, 217, 15, 134217728, 134217728, 218, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 236, 134217728, 235, 16, 134217728, 134217728, 236, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 266, 134217728, 265, 17, 134217728, 134217728, 266, 134217728, 0, 134217728, 266, 134217728, 4, 2, 0, 0, 12, 2, 0, 0, 5, 1, 2, 1, 2, 134217728, 0, 134217728, 134217728, 1, 278, 134217728, 277, 18, 134217728, 134217728, 278, 134217728, 0, 134217728, 134217728, 1, 314, 134217728, 313, 19, 134217728, 134217728, 314, 134217728, 0, 134217728, 314, 134217728, 4, 2, 0, 0, 12, 2, 0, 0, 5, 1, 2, 1, 2, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 338, 134217728, 337, 20, 134217728, 134217728, 338, 134217728, 0, 134217728, 338, 134217728, 4, 2, 0, 0, 0, 1, 2, 134217728, 0, 134217728, 134217728, 1, 354, 134217728, 353, 21, 134217728, 134217728, 354, 134217728, 134217728, 134217728, 354, 134217728, 0, 134217728, 134217728, 1, 370, 134217728, 369, 22, 134217728, 134217728, 370, 134217728, 134217728, 134217728, 370, 134217728, 0, 134217728, 134217728, 1, 388, 134217728, 387, 23, 134217728, 134217728, 388, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 404, 134217728, 403, 24, 134217728, 134217728, 404, 134217728, 134217728, 134217728, 404, 134217728, 0, 134217728, 134217728, 1, 422, 134217728, 421, 25, 134217728, 134217728, 422, 134217728, 12, 2, 0, 0, 26, 1, 2, 134217728, 134217728, 1, 440, 134217728, 439, 27, 134217728, 134217728, 440, 134217728, 12, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 458, 134217728, 457, 28, 134217728, 134217728, 458, 134217728, 4, 2, 0, 0, 5, 1, 2, 134217728, 134217728, 1, 470, 134217728, 469, 29, 134217728, 134217728, 470, 134217728, 0, 134217728, 134217728, 1, 486, 134217728, 485, 30, 134217728, 134217728, 486, 134217728, 134217728, 134217728, 486, 134217728, 0, 134217728, 134217728, 1, 502, 134217728, 501, 31, 134217728, 134217728, 502, 134217728, 134217728, 134217728, 502, 134217728, 0, 134217728, 134217728, 1, 518, 134217728, 517, 32, 134217728, 134217728, 518, 134217728, 134217728, 134217728, 518, 134217728, 0, 134217728, 134217728, 1, 540, 134217728, 539, 33, 134217728, 134217728, 540, 134217728, 0, 134217728, 540, 134217728, 12, 2, 0, 0, 0, 1, 2, 134217728, 134217728, 1, 562, 134217728, 561, 34, 134217728, 134217728, 562, 134217728, 0, 134217728, 562, 134217728, 12, 2, 0, 0, 0, 1, 2, 134217728, 134217728, 1, 590, 134217728, 589, 35, 134217728, 134217728, 590, 134217728, 0, 134217728, 590, 134217728, 12, 2, 4, 2, 0, 0, 0, 1, 2, 0, 26, 1, 2, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "numeric" },
                                    { "type": "name", "name": "_lookup" },
                                    { "type": "name", "name": "<>" },
                                    { "type": "name", "name": "GLOBAL" },
                                    { "type": "name", "name": "+" },
                                    { "type": "number", "value": 1 },
                                    { "type": "name", "name": "LOCAL" },
                                    { "type": "name", "name": "ARG" },
                                    { "type": "name", "name": "FVAR" },
                                    { "type": "name", "name": "BIND" },
                                    { "type": "name", "name": "_set" },
                                    { "type": "name", "name": "_get" },
                                    { "type": "name", "name": "-" },
                                    { "type": "name", "name": "POP" },
                                    { "type": "name", "name": "QUOTE" },
                                    { "type": "name", "name": "NIL" },
                                    { "type": "name", "name": "CONS" },
                                    { "type": "name", "name": "TRAP" },
                                    { "type": "name", "name": "FAIL" },
                                    { "type": "name", "name": "JFALSE" },
                                    { "type": "name", "name": "JUMP" },
                                    { "type": "name", "name": "PREP" },
                                    { "type": "name", "name": "CLOPREP" },
                                    { "type": "name", "name": "RETURN" },
                                    { "type": "name", "name": "MPLUS" },
                                    { "type": "name", "name": "MEQ" },
                                    { "type": "number", "value": 2 },
                                    { "type": "name", "name": "MNIL" },
                                    { "type": "name", "name": "MCONS" },
                                    { "type": "name", "name": "GETTAIL" },
                                    { "type": "name", "name": "TCALL" },
                                    { "type": "name", "name": "PUTARG" },
                                    { "type": "name", "name": "PUTFVAR" },
                                    { "type": "name", "name": "CALL" },
                                    { "type": "name", "name": "CLOSURE" },
                                    { "type": "name", "name": "MPRIM" }]
                            },
                            { "type": "name", "name": "foldl" },
                            {
                                "type": "funcode", "name": "<function>", "arity": 2, "fsize": 1, "ssize": 6, "ops": [3, 13, 2, 22, 2, 22, 24, 4, 0, 13, 3, 22, 3, 13, 1, 22, 0, 13, 3, 22, 24, 22, 24, 22, 24, 5, 1, 15], "rands": [1, 2, 0, 0, 1, 1, 2, 0, 0, 2, 3, 0, 2, 2, 0, 0, 1, 1, 3, 0, 1, 1, 2, 1, 2, 134217728, 0, 134217728], "consts": [
                                    { "type": "name", "name": "_set" },
                                    { "type": "name", "name": "_get" }]
                            },
                            { "type": "funcode", "name": "fixlab", "arity": 1, "fsize": 0, "ssize": 3, "ops": [0, 13, 3, 22, 2, 22, 24, 15], "rands": [0, 2, 1, 0, 0, 1, 2, 134217728], "consts": [{ "type": "name", "name": "_lookup" }] },
                            {
                                "type": "funcode", "name": "pass1", "arity": 3, "fsize": 2, "ssize": 5, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 0, 13, 1, 22, 24, 11, 0, 13, 3, 22, 1, 22, 2, 22, 24, 5, 2, 1, 2, 21, 2, 9, 19, 4, 20, 4, 0, 13, 2, 22, 6, 22, 24, 1, 0, 13, 1, 22, 2, 22, 24, 21, 10], "rands": [1, 5, 134217728, 2, 134217728, 1, 31, 134217728, 0, 134217728, 1, 0, 1, 0, 0, 1, 31, 1, 3, 1, 0, 0, 1, 0, 2, 3, 134217728, 0, 1, 2, 3, 1, 53, 134217728, 0, 134217728, 1, 2, 2, 0, 0, 3, 1, 2, 1, 4, 2, 0, 0, 2, 1, 2, 3, 134217728], "consts": [
                                    { "type": "name", "name": "numeric" },
                                    { "type": "name", "name": "_update" },
                                    { "type": "name", "name": "+" },
                                    { "type": "number", "value": 1 },
                                    { "type": "name", "name": ":" }]
                            },
                            {
                                "type": "funcode", "name": "fixup", "arity": 1, "fsize": 1, "ssize": 3, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 24, 7, 8, 8, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 24, 7, 8, 8, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 24, 7, 8, 8, 15, 5, 2, 15], "rands": [0, 24, 134217728, 23, 0, 134217728, 134217728, 24, 134217728, 0, 134217728, 24, 134217728, 0, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 48, 134217728, 47, 1, 134217728, 134217728, 48, 134217728, 0, 134217728, 48, 134217728, 1, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 72, 134217728, 71, 2, 134217728, 134217728, 72, 134217728, 0, 134217728, 72, 134217728, 2, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728], "consts": [
                                    { "type": "name", "name": "JUMP" },
                                    { "type": "name", "name": "JFALSE" },
                                    { "type": "name", "name": "TRAP" }]
                            },
                            {
                                "type": "funcode", "name": "pass2", "arity": 1, "fsize": 0, "ssize": 4, "ops": [0, 13, 6, 14, 3, 23, 25, 22, 7, 22, 2, 22, 24, 15], "rands": [0, 3, 1, 1, 1, 1, 1, 0, 134217728, 1, 0, 2, 3, 134217728], "consts": [
                                    { "type": "name", "name": "foldl" },
                                    { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 0, "ssize": 3, "ops": [0, 13, 3, 13, 2, 22, 24, 22, 2, 22, 24, 15], "rands": [0, 2, 1, 1, 1, 0, 1, 0, 0, 1, 2, 134217728], "consts": [{ "type": "name", "name": ":" }] }]
                            },
                            { "type": "name", "name": "_assemble" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "lookup", "arity": 2, "fsize": 1, "ssize": 4, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 0, 13, 1, 22, 24, 22, 24, 15, 10], "rands": [1, 35, 134217728, 134217728, 134217728, 35, 134217728, 134217728, 134217728, 35, 134217728, 0, 134217728, 35, 134217728, 134217728, 134217728, 35, 134217728, 134217728, 134217728, 35, 134217728, 0, 2, 0, 0, 1, 1, 0, 0, 1, 1, 2, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "assoc" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "empty", "arity": 0, "fsize": 0, "ssize": 6, "ops": [6, 6, 0, 13, 7, 22, 24, 0, 13, 7, 22, 24, 0, 13, 6, 22, 24, 7, 8, 8, 8, 8, 8, 15], "rands": [0, 0, 1, 1, 134217728, 0, 1, 1, 1, 134217728, 0, 1, 1, 1, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": "_new" }]
                    },
                    {
                        "type": "funcode", "name": "newblock", "arity": 3, "fsize": 3, "ssize": 7, "ops": [2, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 0, 13, 2, 22, 6, 22, 24, 11, 7, 12, 2, 0, 13, 1, 22, 6, 22, 24, 6, 6, 7, 8, 8, 8, 7, 8, 8, 7, 8, 4, 0, 13, 1, 22, 6, 22, 24, 2, 0, 13, 0, 13, 1, 22, 0, 13, 1, 22, 24, 22, 24, 22, 24, 0, 13, 7, 22, 24, 0, 13, 6, 22, 24, 7, 8, 8, 8, 8, 8, 15, 10], "rands": [2, 93, 134217728, 0, 134217728, 93, 134217728, 134217728, 134217728, 93, 134217728, 1, 134217728, 93, 134217728, 134217728, 134217728, 93, 134217728, 134217728, 134217728, 93, 134217728, 0, 2, 0, 0, 1, 1, 2, 33, 134217728, 52, 0, 2, 2, 0, 0, 3, 1, 2, 4, 5, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 2, 2, 0, 0, 3, 1, 2, 1, 6, 1, 7, 2, 2, 0, 8, 1, 1, 0, 1, 1, 2, 0, 1, 6, 1, 134217728, 0, 1, 6, 1, 5, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "string", "value": "<function>" },
                            { "type": "name", "name": "+" },
                            { "type": "number", "value": 1 },
                            { "type": "name", "name": "FVAR" },
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": "_new" },
                            { "type": "name", "name": "++" },
                            { "type": "name", "name": "_get" }]
                    },
                    { "type": "funcode", "name": "e_level", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 1, 15, 10], "rands": [0, 25, 134217728, 0, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 0, 134217728, 134217728] },
                    { "type": "funcode", "name": "e_arity", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 1, 15, 10], "rands": [0, 25, 134217728, 134217728, 134217728, 25, 134217728, 0, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 0, 134217728, 134217728] },
                    { "type": "funcode", "name": "e_fvars", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 18, 0, 13, 1, 22, 24, 15, 10], "rands": [0, 29, 134217728, 134217728, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 0, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 0, 1, 0, 0, 1, 134217728, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    { "type": "funcode", "name": "e_size", "arity": 1, "fsize": 1, "ssize": 2, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 18, 0, 13, 1, 22, 24, 15, 10], "rands": [0, 29, 134217728, 134217728, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 134217728, 134217728, 29, 134217728, 0, 134217728, 29, 134217728, 0, 1, 0, 0, 1, 134217728, 134217728], "consts": [{ "type": "name", "name": "_get" }] },
                    {
                        "type": "funcode", "name": "inc_size", "arity": 2, "fsize": 1, "ssize": 5, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 18, 0, 13, 1, 22, 0, 13, 0, 13, 1, 22, 24, 22, 2, 22, 24, 22, 24, 15, 10], "rands": [0, 41, 134217728, 134217728, 134217728, 41, 134217728, 134217728, 134217728, 41, 134217728, 134217728, 134217728, 41, 134217728, 134217728, 134217728, 41, 134217728, 0, 134217728, 41, 134217728, 0, 2, 0, 0, 1, 2, 2, 1, 0, 0, 1, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "+" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "bind", "arity": 4, "fsize": 2, "ssize": 8, "ops": [2, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 0, 13, 1, 22, 0, 13, 2, 1, 2, 2, 7, 8, 8, 8, 7, 8, 8, 22, 0, 13, 1, 22, 24, 22, 24, 22, 24, 15, 10], "rands": [3, 51, 134217728, 0, 134217728, 51, 134217728, 134217728, 134217728, 51, 134217728, 1, 134217728, 51, 134217728, 134217728, 134217728, 51, 134217728, 134217728, 134217728, 51, 134217728, 0, 2, 1, 0, 1, 2, 0, 0, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 2, 1, 1, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "unbind", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 6, 14, 2, 23, 25, 4, 0, 13, 1, 22, 1, 13, 0, 13, 1, 22, 24, 22, 24, 22, 24, 15, 10], "rands": [1, 45, 134217728, 134217728, 134217728, 45, 134217728, 134217728, 134217728, 45, 134217728, 0, 134217728, 45, 134217728, 134217728, 134217728, 45, 134217728, 134217728, 134217728, 45, 134217728, 0, 1, 0, 1, 1, 1, 1, 2, 0, 0, 1, 1, 2, 1, 0, 0, 1, 0, 1, 1, 2, 134217728, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "h", "arity": 1, "fsize": 2, "ssize": 4, "ops": [2, 9, 19, 9, 19, 4, 20, 9, 19, 5, 20, 9, 18, 20, 4, 0, 13, 3, 22, 1, 22, 24, 11, 1, 15, 5, 2, 9, 19, 4, 20, 4, 0, 13, 1, 22, 3, 13, 1, 22, 24, 22, 24, 15, 2, 9, 18, 7, 15, 10], "rands": [0, 26, 134217728, 25, 134217728, 0, 134217728, 25, 134217728, 134217728, 134217728, 25, 134217728, 134217728, 1, 0, 2, 1, 0, 0, 1, 2, 26, 1, 134217728, 134217728, 0, 44, 134217728, 0, 134217728, 1, 1, 2, 0, 0, 0, 1, 1, 0, 1, 1, 2, 134217728, 0, 49, 134217728, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "=" },
                                    { "type": "name", "name": ":" }]
                            },
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "_get" }]
                    },
                    {
                        "type": "funcode", "name": "alloc", "arity": 2, "fsize": 1, "ssize": 5, "ops": [3, 13, 2, 22, 24, 4, 3, 13, 2, 22, 6, 22, 1, 22, 2, 22, 24, 5, 3, 13, 2, 22, 6, 22, 24, 5, 1, 15], "rands": [1, 1, 1, 0, 1, 0, 2, 4, 0, 0, 0, 1, 0, 2, 1, 3, 4, 134217728, 3, 2, 1, 0, 1, 1, 2, 134217728, 0, 134217728], "consts": [
                            { "type": "name", "name": "LOCAL" },
                            { "type": "number", "value": 1 }]
                    },
                    { "type": "funcode", "name": "dealloc", "arity": 2, "fsize": 0, "ssize": 3, "ops": [3, 13, 2, 22, 2, 22, 24, 5, 3, 13, 2, 22, 6, 22, 24, 15], "rands": [1, 2, 0, 0, 1, 1, 2, 134217728, 2, 2, 1, 0, 0, 1, 2, 134217728], "consts": [{ "type": "number", "value": -1 }] },
                    {
                        "type": "funcode", "name": "alloc_fv", "arity": 2, "fsize": 2, "ssize": 6, "ops": [2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 18, 0, 13, 0, 13, 0, 13, 1, 22, 24, 22, 24, 22, 6, 22, 24, 4, 0, 13, 1, 22, 0, 13, 0, 13, 1, 22, 24, 22, 2, 7, 8, 22, 24, 22, 24, 5, 1, 15, 10], "rands": [1, 61, 134217728, 134217728, 134217728, 61, 134217728, 134217728, 134217728, 61, 134217728, 134217728, 134217728, 61, 134217728, 0, 134217728, 61, 134217728, 134217728, 134217728, 61, 134217728, 0, 2, 1, 1, 2, 1, 0, 0, 1, 0, 1, 0, 3, 1, 2, 1, 4, 2, 0, 0, 5, 2, 2, 1, 0, 0, 1, 0, 0, 134217728, 134217728, 1, 2, 1, 2, 134217728, 1, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "+" },
                            { "type": "name", "name": "length" },
                            { "type": "name", "name": "_get" },
                            { "type": "number", "value": 1 },
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "++" }]
                    },
                    {
                        "type": "funcode", "name": "islocal", "arity": 2, "fsize": 1, "ssize": 4, "ops": [6, 14, 3, 23, 2, 23, 25, 4, 1, 13, 3, 13, 2, 22, 2, 22, 24, 22, 24, 15], "rands": [0, 2, 1, 1, 1, 2, 2, 0, 0, 1, 2, 2, 0, 0, 1, 1, 2, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 2, "ssize": 4, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 18, 0, 13, 1, 22, 6, 22, 24, 11, 6, 12, 0, 13, 1, 22, 6, 22, 24, 11, 0, 13, 1, 22, 3, 13, 3, 22, 24, 22, 24, 15, 0, 15], "rands": [0, 45, 134217728, 0, 134217728, 45, 134217728, 1, 134217728, 45, 134217728, 134217728, 134217728, 45, 134217728, 0, 2, 1, 0, 1, 1, 2, 25, 2, 32, 0, 2, 1, 0, 3, 1, 2, 45, 0, 2, 0, 0, 1, 1, 2, 0, 1, 1, 2, 134217728, 4, 134217728], "consts": [
                                    { "type": "name", "name": "=" },
                                    { "type": "name", "name": "LOCAL" },
                                    truth,
                                    { "type": "name", "name": "ARG" },
                                    { "type": "name", "name": "false" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "selfrec", "arity": 2, "fsize": 0, "ssize": 6, "ops": [0, 13, 3, 13, 2, 22, 2, 22, 24, 22, 3, 13, 2, 22, 24, 6, 6, 7, 8, 8, 8, 22, 24, 15], "rands": [0, 2, 2, 2, 0, 0, 1, 1, 2, 0, 1, 1, 1, 0, 1, 1, 2, 134217728, 134217728, 134217728, 134217728, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "FVAR" },
                            { "type": "number", "value": 0 }]
                    },
                    {
                        "type": "funcode", "name": "reset", "arity": 1, "fsize": 4, "ssize": 6, "ops": [2, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 19, 4, 20, 9, 18, 6, 14, 1, 23, 25, 4, 0, 13, 1, 22, 0, 13, 1, 22, 0, 13, 1, 22, 24, 22, 24, 22, 24, 5, 0, 13, 1, 22, 6, 22, 24, 15, 10], "rands": [0, 55, 134217728, 0, 134217728, 55, 134217728, 134217728, 134217728, 55, 134217728, 1, 134217728, 55, 134217728, 134217728, 134217728, 55, 134217728, 2, 134217728, 55, 134217728, 0, 1, 0, 1, 1, 3, 1, 2, 1, 0, 2, 2, 3, 0, 3, 1, 1, 0, 1, 1, 2, 1, 2, 134217728, 1, 2, 2, 0, 4, 1, 2, 134217728, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "h", "arity": 1, "fsize": 2, "ssize": 3, "ops": [2, 9, 19, 5, 20, 9, 19, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 5, 20, 9, 18, 20, 9, 18, 0, 13, 1, 22, 6, 22, 24, 11, 6, 12, 0, 13, 1, 22, 6, 22, 24, 11, 0, 13, 1, 22, 3, 22, 24, 15, 5, 0, 15], "rands": [0, 51, 134217728, 134217728, 134217728, 51, 134217728, 50, 134217728, 0, 134217728, 50, 134217728, 1, 134217728, 50, 134217728, 134217728, 134217728, 50, 134217728, 134217728, 51, 134217728, 0, 2, 1, 0, 1, 1, 2, 34, 2, 41, 0, 2, 1, 0, 3, 1, 2, 51, 4, 2, 0, 0, 1, 1, 2, 134217728, 134217728, 5, 134217728], "consts": [
                                    { "type": "name", "name": "=" },
                                    { "type": "name", "name": "LOCAL" },
                                    truth,
                                    { "type": "name", "name": "ARG" },
                                    { "type": "name", "name": "<" },
                                    { "type": "name", "name": "true" }]
                            },
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "filter" },
                            { "type": "name", "name": "_get" },
                            { "type": "number", "value": 0 }]
                    },
                    {
                        "type": "funcode", "name": "label", "arity": 0, "fsize": 0, "ssize": 5, "ops": [0, 13, 3, 22, 0, 13, 0, 13, 3, 22, 24, 22, 6, 22, 24, 22, 24, 15], "rands": [0, 2, 1, 0, 1, 2, 2, 1, 1, 0, 1, 0, 3, 1, 2, 1, 2, 134217728], "consts": [
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "+" },
                            { "type": "name", "name": "_get" },
                            { "type": "number", "value": 1 }]
                    },
                    {
                        "type": "funcode", "name": "c_ref", "arity": 2, "fsize": 1, "ssize": 6, "ops": [6, 14, 3, 23, 2, 23, 3, 23, 2, 23, 3, 23, 25, 4, 1, 13, 3, 13, 2, 22, 2, 22, 24, 22, 24, 15], "rands": [0, 5, 3, 1, 1, 2, 2, 3, 0, 4, 1, 5, 5, 0, 0, 1, 4, 2, 0, 0, 1, 1, 2, 0, 1, 134217728], "consts": [{
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 3, "ssize": 5, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 0, 13, 1, 22, 3, 13, 3, 22, 24, 22, 24, 11, 6, 12, 0, 13, 1, 22, 6, 22, 24, 11, 1, 1, 7, 8, 8, 15, 2, 9, 19, 5, 20, 9, 19, 5, 20, 9, 19, 5, 20, 9, 18, 3, 13, 3, 22, 3, 22, 24, 4, 3, 13, 3, 22, 6, 22, 1, 22, 3, 22, 24, 5, 6, 1, 7, 8, 8, 15, 2, 9, 18, 6, 3, 7, 8, 8, 15, 10], "rands": [0, 43, 134217728, 0, 134217728, 43, 134217728, 1, 134217728, 43, 134217728, 2, 134217728, 43, 134217728, 0, 2, 0, 0, 1, 1, 2, 0, 1, 1, 2, 29, 1, 36, 0, 2, 1, 0, 2, 1, 2, 43, 1, 2, 134217728, 134217728, 134217728, 134217728, 0, 84, 134217728, 134217728, 134217728, 84, 134217728, 134217728, 134217728, 84, 134217728, 134217728, 134217728, 84, 134217728, 3, 2, 4, 0, 2, 1, 2, 0, 5, 4, 4, 0, 3, 1, 0, 2, 2, 3, 4, 134217728, 3, 0, 134217728, 134217728, 134217728, 134217728, 0, 93, 134217728, 4, 4, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "=" },
                                    truth,
                                    { "type": "name", "name": "QUOTE" },
                                    { "type": "name", "name": "FVAR" },
                                    { "type": "name", "name": "GLOBAL" }]
                            }]
                    },
                    {
                        "type": "funcode", "name": "trapsort", "arity": 1, "fsize": 1, "ssize": 4, "ops": [6, 14, 25, 4, 0, 13, 1, 22, 7, 22, 2, 22, 24, 15], "rands": [0, 0, 0, 0, 1, 3, 0, 0, 134217728, 1, 0, 2, 3, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "insert", "arity": 2, "fsize": 5, "ssize": 6, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 2, 9, 18, 1, 1, 7, 8, 8, 7, 8, 15, 2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 2, 9, 19, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 4, 0, 13, 1, 22, 1, 22, 24, 11, 0, 13, 1, 1, 7, 8, 8, 22, 0, 13, 1, 1, 7, 8, 8, 22, 1, 22, 24, 22, 24, 15, 0, 13, 1, 1, 7, 8, 8, 22, 3, 13, 1, 1, 7, 8, 8, 22, 1, 22, 24, 22, 24, 15, 5, 10], "rands": [0, 22, 134217728, 0, 134217728, 22, 134217728, 1, 134217728, 22, 134217728, 1, 22, 134217728, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 101, 134217728, 0, 134217728, 101, 134217728, 1, 134217728, 101, 134217728, 1, 101, 134217728, 100, 134217728, 2, 134217728, 100, 134217728, 3, 134217728, 100, 134217728, 134217728, 4, 0, 2, 1, 0, 3, 1, 2, 78, 1, 2, 0, 1, 134217728, 134217728, 134217728, 0, 1, 2, 2, 3, 134217728, 134217728, 134217728, 0, 4, 1, 2, 1, 2, 134217728, 1, 2, 2, 3, 134217728, 134217728, 134217728, 0, 0, 2, 0, 1, 134217728, 134217728, 134217728, 0, 4, 1, 2, 1, 2, 134217728, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "<=" },
                                    { "type": "name", "name": ":" }]
                            },
                            { "type": "name", "name": "foldr" }]
                    },
                    {
                        "type": "funcode", "name": "pgen", "arity": 3, "fsize": 0, "ssize": 7, "ops": [6, 2, 0, 13, 6, 22, 0, 13, 3, 22, 2, 22, 24, 22, 24, 7, 8, 8, 8, 0, 13, 2, 22, 0, 13, 0, 13, 3, 22, 2, 22, 24, 22, 24, 22, 24, 7, 8, 8, 15], "rands": [0, 0, 1, 2, 0, 0, 2, 2, 1, 0, 1, 1, 2, 1, 2, 134217728, 134217728, 134217728, 134217728, 3, 2, 2, 0, 4, 1, 2, 2, 2, 0, 1, 1, 2, 0, 1, 1, 2, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "map" },
                            { "type": "name", "name": "++" },
                            { "type": "name", "name": "concat" }]
                    },
                    {
                        "type": "funcode", "name": "c_patt", "arity": 3, "fsize": 4, "ssize": 8, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 6, 1, 7, 8, 8, 6, 7, 8, 7, 8, 8, 8, 8, 22, 7, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 3, 13, 1, 22, 2, 22, 24, 11, 3, 13, 6, 6, 1, 7, 8, 8, 3, 13, 1, 22, 2, 22, 24, 6, 7, 8, 7, 8, 8, 8, 8, 22, 7, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 3, 13, 6, 6, 3, 13, 1, 22, 2, 22, 24, 7, 8, 8, 7, 8, 8, 22, 7, 22, 7, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 3, 13, 6, 7, 8, 22, 7, 22, 7, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 4, 3, 13, 24, 4, 0, 13, 1, 22, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 3, 13, 1, 22, 2, 22, 24, 6, 1, 7, 8, 8, 7, 8, 8, 8, 8, 22, 0, 13, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 3, 13, 2, 22, 1, 22, 24, 22, 7, 22, 24, 22, 24, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 18, 20, 9, 18, 3, 13, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 6, 7, 8, 7, 8, 8, 8, 22, 3, 13, 1, 22, 0, 13, 2, 22, 6, 22, 24, 22, 2, 22, 24, 6, 7, 8, 7, 7, 8, 8, 7, 8, 8, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 6, 7, 8, 7, 8, 8, 8, 22, 3, 13, 1, 22, 0, 13, 2, 22, 6, 22, 24, 22, 2, 22, 24, 6, 7, 8, 7, 7, 8, 8, 3, 13, 1, 22, 2, 22, 2, 22, 24, 7, 8, 8, 8, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 3, 13, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 6, 7, 8, 7, 8, 8, 8, 22, 7, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 4, 3, 13, 1, 22, 24, 2, 2, 21, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 3, 13, 6, 6, 1, 7, 8, 8, 6, 1, 7, 8, 8, 7, 8, 8, 8, 22, 3, 13, 1, 22, 2, 22, 2, 22, 24, 7, 8, 22, 1, 2, 7, 8, 8, 7, 8, 22, 24, 15, 5, 10], "rands": [0, 52, 134217728, 51, 0, 134217728, 134217728, 52, 134217728, 0, 134217728, 52, 134217728, 1, 0, 0, 1, 2, 3, 1, 2, 1, 134217728, 134217728, 134217728, 3, 0, 134217728, 134217728, 134217728, 4, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728, 1, 1, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 0, 138, 134217728, 137, 5, 134217728, 134217728, 138, 134217728, 0, 134217728, 138, 134217728, 1, 0, 0, 1, 3, 2, 0, 0, 2, 1, 2, 113, 2, 3, 1, 2, 1, 134217728, 134217728, 134217728, 4, 2, 0, 0, 2, 1, 2, 4, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728, 1, 1, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 2, 3, 1, 6, 5, 2, 0, 0, 2, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728, 1, 134217728, 2, 3, 134217728, 134217728, 0, 160, 134217728, 159, 7, 134217728, 134217728, 160, 134217728, 2, 3, 8, 134217728, 134217728, 0, 134217728, 1, 134217728, 2, 3, 134217728, 134217728, 0, 245, 134217728, 244, 9, 134217728, 134217728, 245, 134217728, 0, 134217728, 1, 1, 0, 0, 2, 10, 1, 1, 0, 1, 3, 2, 3, 1, 2, 2, 134217728, 134217728, 134217728, 4, 2, 0, 0, 2, 1, 2, 11, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 12, 1, 13, 3, 14, 2, 0, 1, 2, 2, 2, 0, 6, 2, 1, 0, 1, 1, 2, 1, 134217728, 2, 3, 0, 1, 1, 2, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 0, 327, 134217728, 326, 15, 134217728, 134217728, 327, 134217728, 0, 134217728, 327, 134217728, 326, 134217728, 325, 7, 134217728, 134217728, 326, 134217728, 134217728, 327, 134217728, 1, 0, 0, 1, 2, 3, 1, 2, 1, 134217728, 134217728, 134217728, 16, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 0, 3, 0, 0, 17, 2, 1, 0, 18, 1, 2, 1, 2, 2, 3, 8, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 1, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 134217728, 0, 411, 134217728, 410, 15, 134217728, 134217728, 411, 134217728, 0, 134217728, 411, 134217728, 1, 134217728, 411, 134217728, 1, 0, 0, 2, 2, 3, 1, 2, 2, 134217728, 134217728, 134217728, 16, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 0, 3, 0, 0, 17, 2, 1, 0, 18, 1, 2, 1, 2, 2, 3, 19, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 3, 1, 0, 1, 1, 2, 2, 3, 134217728, 134217728, 134217728, 134217728, 1, 2, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 0, 453, 134217728, 452, 20, 134217728, 134217728, 453, 134217728, 1, 0, 0, 0, 2, 3, 1, 2, 0, 134217728, 134217728, 134217728, 21, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728, 1, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 0, 470, 134217728, 469, 22, 134217728, 134217728, 0, 7, 1, 0, 0, 1, 1, 2, 3, 134217728, 0, 532, 134217728, 531, 23, 134217728, 134217728, 532, 134217728, 0, 134217728, 532, 134217728, 1, 134217728, 532, 134217728, 1, 0, 0, 2, 2, 3, 1, 2, 2, 134217728, 134217728, 134217728, 24, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 0, 3, 0, 0, 1, 1, 2, 2, 3, 134217728, 134217728, 1, 2, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "const" },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "TRAP" },
                            { "type": "name", "name": "QUOTE" },
                            { "type": "name", "name": "MEQ" },
                            { "type": "name", "name": "var" },
                            { "type": "name", "name": "BIND" },
                            { "type": "name", "name": "anon" },
                            { "type": "name", "name": "POP" },
                            { "type": "name", "name": "prim" },
                            { "type": "name", "name": "length" },
                            { "type": "name", "name": "MPRIM" },
                            { "type": "name", "name": "reverse" },
                            { "type": "name", "name": "_mapa" },
                            { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 2, "ssize": 4, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 1, 22, 3, 22, 24, 2, 8, 15, 2, 15], "rands": [0, 23, 134217728, 0, 134217728, 23, 134217728, 1, 134217728, 23, 134217728, 1, 3, 1, 0, 0, 1, 2, 2, 3, 1, 134217728, 134217728, 1, 134217728] },
                            { "type": "name", "name": "cons" },
                            { "type": "name", "name": "MCONS" },
                            { "type": "name", "name": "+" },
                            { "type": "number", "value": 1 },
                            { "type": "name", "name": "GETTAIL" },
                            { "type": "name", "name": "nil" },
                            { "type": "name", "name": "MNIL" },
                            { "type": "name", "name": "list" },
                            { "type": "name", "name": "plus" },
                            { "type": "name", "name": "MPLUS" }]
                    },
                    {
                        "type": "funcode", "name": "c_arg", "arity": 3, "fsize": 1, "ssize": 6, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 0, 13, 3, 13, 1, 22, 2, 22, 24, 22, 24, 11, 3, 13, 1, 22, 6, 22, 2, 22, 2, 22, 24, 5, 3, 13, 7, 22, 7, 22, 7, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 3, 13, 7, 22, 7, 22, 7, 22, 24, 15, 5, 3, 13, 6, 6, 2, 7, 8, 8, 7, 8, 8, 22, 3, 13, 2, 22, 6, 22, 2, 22, 24, 7, 8, 22, 7, 22, 24, 15], "rands": [1, 48, 134217728, 47, 0, 134217728, 134217728, 48, 134217728, 0, 134217728, 48, 134217728, 1, 1, 1, 2, 0, 0, 2, 1, 2, 0, 1, 48, 2, 4, 0, 0, 2, 1, 0, 2, 2, 3, 4, 134217728, 3, 3, 134217728, 0, 134217728, 1, 134217728, 2, 3, 134217728, 134217728, 1, 68, 134217728, 67, 3, 134217728, 134217728, 68, 134217728, 3, 3, 134217728, 0, 134217728, 1, 134217728, 2, 3, 134217728, 134217728, 3, 3, 4, 2, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 4, 3, 1, 0, 5, 1, 2, 2, 3, 134217728, 134217728, 1, 134217728, 2, 3, 134217728], "consts": [
                            { "type": "name", "name": "var" },
                            { "type": "name", "name": "not" },
                            { "type": "name", "name": "ARG" },
                            { "type": "name", "name": "anon" },
                            { "type": "name", "name": "seq" },
                            { "type": "number", "value": 0 }]
                    },
                    {
                        "type": "funcode", "name": "c_match", "arity": 2, "fsize": 2, "ssize": 5, "ops": [6, 14, 3, 23, 2, 23, 25, 4, 1, 13, 6, 22, 2, 22, 24, 4, 0, 13, 6, 22, 0, 13, 3, 22, 1, 22, 24, 22, 24, 0, 13, 0, 13, 3, 22, 1, 22, 24, 22, 24, 7, 8, 8, 15], "rands": [0, 2, 1, 1, 1, 2, 2, 0, 0, 2, 1, 0, 0, 1, 2, 1, 2, 2, 3, 0, 4, 2, 2, 0, 1, 1, 2, 1, 2, 5, 1, 4, 2, 3, 0, 1, 1, 2, 0, 1, 134217728, 134217728, 134217728, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "compile", "arity": 2, "fsize": 3, "ssize": 6, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 4, 20, 4, 3, 13, 2, 22, 1, 22, 3, 22, 24, 4, 0, 13, 1, 22, 3, 13, 0, 13, 2, 22, 6, 22, 24, 22, 1, 22, 24, 22, 24, 15, 10], "rands": [1, 5, 134217728, 134217728, 134217728, 1, 41, 134217728, 0, 134217728, 1, 1, 3, 0, 0, 0, 1, 2, 2, 3, 2, 0, 2, 2, 0, 0, 2, 1, 2, 0, 0, 2, 1, 2, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": ":" },
                                    { "type": "name", "name": "+" },
                                    { "type": "number", "value": 1 }]
                            },
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "map" },
                            { "type": "name", "name": "concat" }]
                    },
                    {
                        "type": "funcode", "name": "c_rule", "arity": 2, "fsize": 8, "ssize": 6, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 0, 13, 3, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 4, 1, 13, 1, 22, 2, 22, 0, 22, 24, 4, 3, 13, 2, 22, 24, 5, 6, 3, 13, 1, 22, 24, 1, 7, 8, 8, 8, 3, 13, 1, 22, 24, 7, 8, 8, 15, 2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 0, 13, 3, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 4, 1, 13, 1, 22, 2, 22, 0, 22, 24, 4, 1, 13, 1, 22, 2, 22, 0, 22, 24, 4, 3, 13, 2, 22, 24, 5, 6, 3, 13, 1, 22, 24, 1, 6, 1, 7, 8, 8, 1, 7, 8, 8, 8, 8, 8, 0, 13, 1, 6, 7, 8, 8, 22, 3, 13, 1, 22, 24, 22, 24, 7, 8, 8, 15, 10], "rands": [0, 61, 134217728, 0, 134217728, 61, 134217728, 1, 134217728, 61, 134217728, 0, 1, 1, 0, 1, 2, 2, 2, 0, 0, 1, 1, 2, 3, 2, 3, 1, 0, 1, 1, 1, 2, 3, 4, 3, 1, 1, 0, 1, 134217728, 2, 4, 1, 3, 0, 1, 4, 134217728, 134217728, 134217728, 134217728, 5, 1, 3, 0, 1, 134217728, 134217728, 134217728, 134217728, 0, 158, 134217728, 0, 134217728, 158, 134217728, 1, 134217728, 158, 134217728, 2, 134217728, 158, 134217728, 6, 0, 0, 3, 0, 1, 1, 0, 1, 4, 2, 2, 0, 0, 1, 1, 2, 5, 4, 3, 1, 0, 1, 1, 3, 2, 3, 6, 4, 3, 2, 0, 1, 1, 1, 2, 3, 7, 3, 1, 1, 0, 1, 134217728, 2, 4, 1, 5, 0, 1, 6, 4, 3, 134217728, 134217728, 134217728, 7, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 5, 2, 3, 6, 134217728, 134217728, 134217728, 0, 5, 1, 5, 0, 1, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "_get" },
                            { "type": "name", "name": "true" },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "false" },
                            { "type": "name", "name": "JFALSE" },
                            { "type": "name", "name": ":" },
                            { "type": "number", "value": 0 }]
                    },
                    {
                        "type": "funcode", "name": "c_traps", "arity": 1, "fsize": 1, "ssize": 6, "ops": [6, 14, 25, 4, 0, 13, 6, 22, 1, 13, 6, 22, 2, 22, 7, 22, 24, 22, 24, 15], "rands": [0, 0, 0, 0, 1, 2, 2, 0, 0, 3, 3, 0, 0, 1, 134217728, 2, 3, 1, 2, 134217728], "consts": [
                            {
                                "type": "funcode", "name": "h", "arity": 3, "fsize": 3, "ssize": 5, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 4, 0, 13, 2, 22, 1, 22, 24, 11, 1, 1, 0, 13, 1, 22, 2, 22, 24, 21, 0, 13, 2, 22, 6, 22, 24, 0, 13, 1, 1, 7, 8, 8, 22, 1, 22, 24, 0, 13, 6, 7, 8, 22, 2, 22, 24, 21, 5, 10], "rands": [1, 5, 134217728, 2, 134217728, 1, 67, 134217728, 66, 134217728, 0, 134217728, 66, 134217728, 1, 134217728, 66, 134217728, 134217728, 2, 0, 2, 0, 0, 1, 1, 2, 38, 1, 2, 1, 2, 0, 0, 2, 1, 2, 3, 2, 2, 0, 0, 3, 1, 2, 1, 2, 0, 1, 134217728, 134217728, 134217728, 0, 2, 1, 2, 1, 2, 4, 134217728, 134217728, 0, 2, 1, 2, 3, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "=" },
                                    { "type": "name", "name": ":" },
                                    { "type": "name", "name": "+" },
                                    { "type": "number", "value": 1 },
                                    { "type": "name", "name": "POP" }]
                            },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "seq" },
                            { "type": "number", "value": 0 }]
                    },
                    {
                        "type": "funcode", "name": "c_body", "arity": 2, "fsize": 5, "ssize": 7, "ops": [2, 9, 18, 6, 7, 8, 15, 2, 9, 19, 4, 20, 4, 3, 13, 1, 22, 2, 22, 24, 4, 0, 13, 3, 22, 3, 13, 1, 22, 24, 22, 24, 4, 3, 13, 3, 13, 1, 22, 24, 22, 24, 4, 6, 3, 13, 1, 22, 24, 0, 13, 1, 22, 7, 22, 24, 11, 7, 12, 6, 3, 13, 1, 22, 24, 3, 13, 1, 22, 2, 22, 24, 7, 8, 8, 8, 7, 8, 8, 8, 15, 10], "rands": [0, 7, 134217728, 0, 134217728, 134217728, 134217728, 0, 81, 134217728, 0, 134217728, 1, 1, 2, 0, 0, 1, 1, 2, 2, 1, 2, 3, 0, 2, 1, 2, 0, 1, 1, 2, 3, 4, 1, 2, 1, 2, 0, 1, 0, 1, 4, 2, 3, 1, 2, 0, 1, 3, 2, 4, 0, 134217728, 1, 2, 59, 134217728, 76, 2, 5, 1, 4, 0, 1, 0, 2, 1, 0, 1, 1, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "FAIL" },
                            { "type": "name", "name": "map" },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "=" }]
                    },
                    {
                        "type": "funcode", "name": "c_closure", "arity": 4, "fsize": 4, "ssize": 10, "ops": [3, 13, 2, 22, 2, 22, 2, 22, 24, 4, 3, 13, 3, 13, 2, 22, 1, 22, 24, 22, 24, 4, 3, 13, 1, 22, 24, 4, 0, 13, 1, 22, 24, 4, 3, 13, 6, 22, 1, 22, 24, 5, 6, 6, 3, 13, 2, 22, 2, 22, 1, 22, 24, 7, 8, 8, 6, 1, 7, 8, 8, 0, 13, 6, 22, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 3, 13, 6, 22, 1, 22, 24, 22, 7, 22, 24, 22, 24, 6, 1, 7, 8, 8, 7, 8, 8, 8, 8, 8, 15], "rands": [1, 3, 0, 0, 1, 1, 3, 2, 3, 0, 2, 1, 3, 2, 2, 0, 0, 1, 2, 0, 1, 1, 4, 1, 0, 0, 1, 2, 0, 1, 2, 0, 1, 3, 5, 2, 1, 0, 1, 1, 2, 134217728, 2, 3, 6, 3, 0, 0, 1, 1, 1, 2, 3, 134217728, 134217728, 134217728, 4, 3, 134217728, 134217728, 134217728, 5, 2, 2, 0, 6, 3, 7, 2, 8, 1, 3, 2, 2, 0, 7, 2, 1, 0, 2, 1, 2, 1, 134217728, 2, 3, 1, 2, 8, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "length" },
                            { "type": "number", "value": 1 },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "QUOTE" },
                            { "type": "name", "name": "CLOPREP" },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "_mapa" },
                            {
                                "type": "funcode", "name": "<function>", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 3, 22, 24, 6, 1, 7, 8, 8, 7, 8, 8, 8, 2, 8, 15, 2, 15], "rands": [0, 31, 134217728, 0, 134217728, 31, 134217728, 1, 134217728, 31, 134217728, 0, 1, 2, 1, 0, 2, 1, 2, 1, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 134217728, 134217728, 1, 134217728], "consts": [
                                    { "type": "name", "name": "seq" },
                                    { "type": "name", "name": "PUTFVAR" }]
                            },
                            { "type": "name", "name": "CLOSURE" }]
                    },
                    {
                        "type": "funcode", "name": "yield", "arity": 2, "fsize": 0, "ssize": 4, "ops": [2, 11, 6, 2, 6, 7, 8, 7, 8, 8, 8, 15, 2, 15], "rands": [1, 12, 0, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 134217728], "consts": [
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": "RETURN" }]
                    },
                    {
                        "type": "funcode", "name": "c_exp", "arity": 3, "fsize": 7, "ssize": 12, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 6, 1, 7, 8, 8, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 3, 13, 3, 13, 1, 22, 2, 22, 24, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 20, 4, 2, 11, 3, 13, 1, 22, 2, 22, 24, 12, 6, 11, 0, 13, 0, 13, 1, 22, 24, 22, 3, 13, 2, 22, 24, 22, 24, 12, 6, 11, 6, 0, 13, 6, 22, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 1, 22, 7, 22, 24, 22, 24, 6, 0, 13, 1, 22, 24, 7, 8, 8, 7, 8, 8, 8, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 4, 0, 13, 1, 22, 24, 4, 3, 13, 6, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 6, 1, 7, 8, 8, 0, 13, 6, 22, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 3, 13, 6, 22, 1, 22, 24, 22, 7, 22, 24, 22, 24, 6, 1, 7, 8, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 24, 4, 3, 13, 24, 4, 2, 11, 6, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 1, 7, 8, 8, 3, 13, 1, 22, 2, 22, 0, 22, 24, 1, 3, 13, 1, 22, 2, 22, 0, 22, 24, 7, 8, 8, 8, 8, 8, 8, 15, 6, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 1, 7, 8, 8, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 1, 7, 8, 8, 1, 3, 13, 1, 22, 2, 22, 0, 22, 24, 1, 7, 8, 8, 8, 8, 8, 8, 8, 8, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 6, 22, 1, 22, 2, 22, 24, 5, 3, 13, 1, 22, 2, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 5, 1, 15, 5, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 2, 22, 0, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 5, 6, 1, 6, 1, 7, 8, 8, 1, 7, 8, 8, 8, 8, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 1, 22, 1, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 5, 6, 1, 6, 1, 7, 8, 8, 1, 7, 8, 8, 8, 8, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 3, 13, 6, 22, 1, 22, 1, 22, 2, 22, 24, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 6, 3, 13, 1, 22, 2, 22, 0, 22, 24, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 7, 8, 7, 8, 8, 8, 8, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 3, 13, 6, 7, 8, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 4, 3, 13, 1, 22, 24, 2, 2, 21, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 2, 22, 0, 22, 24, 6, 7, 8, 3, 13, 1, 22, 2, 22, 2, 22, 24, 7, 8, 8, 8, 8, 15, 5, 10], "rands": [0, 26, 134217728, 25, 0, 134217728, 134217728, 26, 134217728, 0, 134217728, 26, 134217728, 1, 2, 1, 0, 134217728, 134217728, 134217728, 0, 2, 1, 2, 134217728, 134217728, 0, 54, 134217728, 53, 2, 134217728, 134217728, 54, 134217728, 0, 134217728, 54, 134217728, 1, 2, 2, 2, 0, 0, 1, 1, 2, 0, 2, 1, 2, 134217728, 134217728, 0, 145, 134217728, 144, 3, 134217728, 134217728, 145, 134217728, 144, 134217728, 143, 2, 134217728, 134217728, 144, 134217728, 0, 134217728, 144, 134217728, 134217728, 1, 2, 87, 3, 2, 0, 0, 1, 1, 2, 88, 4, 105, 5, 2, 6, 1, 1, 0, 1, 0, 4, 1, 1, 0, 1, 1, 2, 106, 4, 145, 7, 8, 2, 7, 0, 9, 3, 10, 2, 0, 1, 1, 2, 2, 0, 1, 1, 134217728, 2, 3, 1, 2, 11, 6, 1, 1, 0, 1, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 228, 134217728, 227, 3, 134217728, 134217728, 228, 134217728, 0, 134217728, 1, 6, 1, 1, 0, 1, 2, 1, 2, 7, 0, 3, 0, 0, 1, 1, 12, 2, 3, 7, 13, 2, 134217728, 134217728, 134217728, 8, 2, 7, 0, 9, 3, 14, 2, 0, 1, 1, 2, 2, 0, 5, 2, 15, 0, 1, 1, 2, 1, 134217728, 2, 3, 1, 2, 16, 2, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 2, 1, 2, 134217728, 134217728, 0, 352, 134217728, 351, 17, 134217728, 134217728, 352, 134217728, 0, 134217728, 352, 134217728, 1, 134217728, 352, 134217728, 2, 134217728, 352, 134217728, 6, 0, 0, 3, 6, 0, 0, 4, 2, 301, 7, 0, 3, 0, 0, 1, 1, 12, 2, 3, 18, 3, 134217728, 134217728, 134217728, 0, 3, 1, 0, 1, 1, 19, 2, 3, 3, 0, 3, 2, 0, 1, 1, 19, 2, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 7, 0, 3, 0, 0, 1, 1, 12, 2, 3, 18, 3, 134217728, 134217728, 134217728, 0, 3, 1, 0, 1, 1, 12, 2, 3, 20, 4, 134217728, 134217728, 134217728, 3, 0, 3, 2, 0, 1, 1, 12, 2, 3, 4, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 430, 134217728, 429, 21, 134217728, 134217728, 430, 134217728, 429, 134217728, 428, 22, 134217728, 134217728, 429, 134217728, 0, 134217728, 429, 134217728, 428, 134217728, 427, 0, 134217728, 134217728, 428, 134217728, 1, 134217728, 428, 134217728, 134217728, 429, 134217728, 134217728, 430, 134217728, 2, 134217728, 430, 134217728, 7, 4, 0, 0, 1, 1, 1, 2, 1, 3, 4, 134217728, 0, 3, 2, 0, 1, 1, 2, 2, 3, 3, 8, 2, 0, 0, 1, 1, 2, 134217728, 3, 134217728, 134217728, 134217728, 134217728, 0, 514, 134217728, 513, 21, 134217728, 134217728, 514, 134217728, 513, 134217728, 512, 22, 134217728, 134217728, 513, 134217728, 0, 134217728, 513, 134217728, 1, 134217728, 513, 134217728, 134217728, 514, 134217728, 2, 134217728, 514, 134217728, 0, 3, 1, 0, 1, 1, 12, 2, 3, 3, 9, 2, 0, 0, 1, 1, 2, 4, 0, 3, 2, 0, 1, 1, 2, 2, 3, 5, 10, 2, 0, 0, 1, 1, 2, 134217728, 7, 3, 23, 4, 134217728, 134217728, 134217728, 5, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 604, 134217728, 603, 21, 134217728, 134217728, 604, 134217728, 603, 134217728, 602, 24, 134217728, 134217728, 603, 134217728, 0, 134217728, 603, 134217728, 1, 134217728, 603, 134217728, 2, 134217728, 603, 134217728, 134217728, 604, 134217728, 3, 134217728, 604, 134217728, 11, 4, 0, 0, 1, 1, 2, 2, 1, 3, 4, 4, 9, 2, 0, 0, 1, 1, 2, 5, 0, 3, 3, 0, 1, 1, 2, 2, 3, 6, 10, 2, 0, 0, 1, 1, 2, 134217728, 7, 4, 23, 5, 134217728, 134217728, 134217728, 6, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 640, 134217728, 639, 25, 134217728, 134217728, 640, 134217728, 0, 134217728, 640, 134217728, 1, 134217728, 640, 134217728, 1, 2, 11, 4, 26, 0, 0, 1, 1, 2, 1, 3, 4, 0, 2, 1, 2, 134217728, 134217728, 0, 692, 134217728, 691, 27, 134217728, 134217728, 692, 134217728, 0, 134217728, 692, 134217728, 1, 134217728, 692, 134217728, 1, 2, 7, 0, 3, 0, 0, 1, 1, 12, 2, 3, 0, 3, 1, 0, 1, 1, 12, 2, 3, 28, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 0, 2, 1, 2, 134217728, 134217728, 0, 712, 134217728, 711, 29, 134217728, 134217728, 712, 134217728, 1, 2, 30, 134217728, 134217728, 0, 2, 1, 2, 134217728, 134217728, 0, 729, 134217728, 728, 31, 134217728, 134217728, 0, 12, 1, 0, 0, 1, 1, 2, 3, 134217728, 0, 775, 134217728, 774, 7, 134217728, 134217728, 775, 134217728, 0, 134217728, 775, 134217728, 1, 134217728, 775, 134217728, 7, 0, 3, 0, 0, 1, 1, 12, 2, 3, 32, 134217728, 134217728, 0, 3, 1, 0, 1, 1, 2, 2, 3, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "const" },
                            { "type": "name", "name": "QUOTE" },
                            { "type": "name", "name": "var" },
                            { "type": "name", "name": "apply" },
                            falsity,
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "length" },
                            { "type": "name", "name": "seq" },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "_mapa" },
                            { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 0, "ssize": 4, "ops": [3, 13, 2, 22, 3, 22, 0, 22, 24, 2, 8, 15], "rands": [1, 3, 0, 0, 2, 1, 0, 2, 3, 1, 134217728, 134217728], "consts": [{ "type": "name", "name": "false" }] },
                            { "type": "name", "name": "TCALL" },
                            { "type": "name", "name": "false" },
                            { "type": "name", "name": "PREP" },
                            {
                                "type": "funcode", "name": "<function>", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 6, 3, 13, 1, 22, 3, 22, 0, 22, 24, 6, 1, 7, 8, 8, 7, 8, 8, 8, 2, 8, 15, 2, 15], "rands": [0, 33, 134217728, 0, 134217728, 33, 134217728, 1, 134217728, 33, 134217728, 0, 1, 3, 1, 0, 2, 1, 1, 2, 3, 2, 0, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 134217728, 1, 134217728, 134217728, 1, 134217728], "consts": [
                                    { "type": "name", "name": "seq" },
                                    { "type": "name", "name": "false" },
                                    { "type": "name", "name": "PUTARG" }]
                            },
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": "CALL" },
                            { "type": "name", "name": "if" },
                            { "type": "name", "name": "JFALSE" },
                            { "type": "name", "name": "true" },
                            { "type": "name", "name": "JUMP" },
                            { "type": "name", "name": "let" },
                            { "type": "name", "name": "val" },
                            { "type": "name", "name": "BIND" },
                            { "type": "name", "name": "fun" },
                            { "type": "name", "name": "function" },
                            { "type": "string", "value": "<function>" },
                            { "type": "name", "name": "cons" },
                            { "type": "name", "name": "CONS" },
                            { "type": "name", "name": "nil" },
                            { "type": "name", "name": "NIL" },
                            { "type": "name", "name": "list" },
                            { "type": "name", "name": "POP" }]
                    },
                    {
                        "type": "funcode", "name": "i_func", "arity": 4, "fsize": 1, "ssize": 7, "ops": [3, 13, 3, 13, 2, 22, 3, 13, 2, 22, 2, 22, 2, 22, 24, 22, 24, 22, 24, 4, 3, 13, 6, 22, 1, 22, 24, 5, 0, 13, 3, 13, 2, 22, 2, 22, 1, 22, 24, 22, 24, 15], "rands": [1, 1, 2, 2, 2, 0, 3, 3, 0, 0, 1, 1, 3, 2, 3, 1, 2, 0, 1, 0, 4, 2, 0, 0, 0, 1, 2, 134217728, 1, 1, 5, 3, 0, 0, 1, 1, 0, 2, 3, 0, 1, 134217728], "consts": [
                            { "type": "number", "value": 1 },
                            { "type": "name", "name": "_closure" }]
                    },
                    {
                        "type": "funcode", "name": "interp", "arity": 2, "fsize": 5, "ssize": 8, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 1, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 6, 14, 1, 23, 25, 4, 1, 13, 3, 13, 1, 22, 2, 22, 24, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 4, 0, 13, 3, 13, 1, 22, 2, 22, 24, 22, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 1, 22, 7, 22, 24, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 2, 22, 24, 11, 1, 2, 21, 1, 2, 21, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 6, 22, 3, 13, 1, 22, 2, 22, 24, 22, 2, 22, 24, 5, 3, 13, 1, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 5, 1, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 6, 22, 3, 13, 1, 22, 1, 22, 1, 22, 2, 22, 24, 22, 2, 22, 24, 5, 3, 13, 1, 22, 2, 22, 24, 4, 3, 13, 1, 22, 2, 22, 24, 5, 1, 15, 5, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 6, 22, 1, 22, 1, 22, 2, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 0, 13, 3, 13, 1, 22, 2, 22, 24, 22, 3, 13, 1, 22, 2, 22, 24, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 18, 7, 15, 5, 2, 9, 19, 9, 6, 17, 20, 4, 0, 13, 6, 14, 3, 23, 2, 23, 25, 22, 1, 22, 7, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 3, 13, 1, 22, 2, 22, 24, 5, 1, 2, 21, 5, 10], "rands": [0, 16, 134217728, 15, 0, 134217728, 134217728, 16, 134217728, 0, 134217728, 16, 134217728, 0, 134217728, 134217728, 0, 48, 134217728, 47, 1, 134217728, 134217728, 48, 134217728, 0, 134217728, 48, 134217728, 2, 1, 0, 1, 1, 1, 1, 1, 1, 2, 0, 0, 1, 1, 2, 0, 1, 134217728, 134217728, 0, 89, 134217728, 88, 3, 134217728, 134217728, 89, 134217728, 0, 134217728, 1, 4, 2, 0, 2, 0, 0, 1, 1, 2, 0, 5, 3, 6, 2, 0, 1, 1, 2, 2, 0, 1, 1, 134217728, 2, 3, 1, 2, 134217728, 134217728, 0, 125, 134217728, 124, 7, 134217728, 134217728, 125, 134217728, 0, 134217728, 125, 134217728, 1, 134217728, 125, 134217728, 2, 134217728, 125, 134217728, 0, 2, 0, 0, 1, 1, 2, 121, 1, 1, 2, 2, 1, 2, 134217728, 0, 195, 134217728, 194, 8, 134217728, 134217728, 195, 134217728, 194, 134217728, 193, 9, 134217728, 134217728, 194, 134217728, 0, 134217728, 194, 134217728, 1, 134217728, 194, 134217728, 134217728, 195, 134217728, 2, 134217728, 195, 134217728, 2, 4, 0, 0, 10, 1, 0, 2, 1, 0, 1, 1, 2, 2, 1, 3, 4, 134217728, 0, 2, 2, 0, 1, 1, 2, 3, 3, 2, 0, 0, 1, 1, 2, 134217728, 3, 134217728, 134217728, 134217728, 0, 273, 134217728, 272, 8, 134217728, 134217728, 273, 134217728, 272, 134217728, 271, 11, 134217728, 134217728, 272, 134217728, 0, 134217728, 272, 134217728, 1, 134217728, 272, 134217728, 2, 134217728, 272, 134217728, 134217728, 273, 134217728, 3, 134217728, 273, 134217728, 2, 4, 0, 0, 10, 1, 4, 4, 0, 0, 1, 1, 2, 2, 1, 3, 4, 2, 1, 3, 4, 134217728, 0, 2, 3, 0, 1, 1, 2, 4, 3, 2, 0, 0, 1, 1, 2, 134217728, 4, 134217728, 134217728, 134217728, 0, 303, 134217728, 302, 12, 134217728, 134217728, 303, 134217728, 0, 134217728, 303, 134217728, 1, 134217728, 303, 134217728, 4, 4, 13, 0, 0, 1, 1, 2, 1, 3, 4, 134217728, 134217728, 0, 341, 134217728, 340, 14, 134217728, 134217728, 341, 134217728, 0, 134217728, 341, 134217728, 1, 134217728, 341, 134217728, 15, 2, 0, 2, 0, 0, 1, 1, 2, 0, 0, 2, 1, 0, 1, 1, 2, 1, 2, 134217728, 134217728, 0, 353, 134217728, 352, 16, 134217728, 134217728, 353, 134217728, 134217728, 134217728, 134217728, 0, 378, 134217728, 377, 17, 134217728, 134217728, 0, 5, 3, 18, 2, 0, 1, 1, 2, 2, 0, 0, 1, 134217728, 2, 3, 134217728, 134217728, 0, 407, 134217728, 406, 19, 134217728, 134217728, 407, 134217728, 0, 134217728, 407, 134217728, 1, 134217728, 407, 134217728, 0, 2, 0, 0, 1, 1, 2, 134217728, 1, 1, 2, 134217728, 134217728], "consts": [
                            { "type": "name", "name": "const" },
                            { "type": "name", "name": "var" },
                            {
                                "type": "funcode", "name": "case", "arity": 1, "fsize": 1, "ssize": 3, "ops": [2, 9, 19, 5, 20, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 18, 1, 15, 5, 2, 9, 18, 0, 13, 3, 22, 24, 15, 10], "rands": [0, 20, 134217728, 134217728, 134217728, 20, 134217728, 19, 0, 134217728, 134217728, 20, 134217728, 0, 134217728, 20, 134217728, 0, 134217728, 134217728, 0, 29, 134217728, 1, 1, 1, 0, 1, 134217728, 134217728], "consts": [
                                    { "type": "name", "name": "QUOTE" },
                                    { "type": "name", "name": "_glodef" }]
                            },
                            { "type": "name", "name": "apply" },
                            { "type": "name", "name": "_apply" },
                            { "type": "name", "name": "_mapa" },
                            { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 0, "ssize": 3, "ops": [3, 13, 2, 22, 3, 22, 24, 2, 8, 15], "rands": [1, 2, 0, 0, 2, 1, 2, 1, 134217728, 134217728] },
                            { "type": "name", "name": "if" },
                            { "type": "name", "name": "let" },
                            { "type": "name", "name": "val" },
                            { "type": "name", "name": "QUOTE" },
                            { "type": "name", "name": "fun" },
                            { "type": "name", "name": "function" },
                            { "type": "string", "value": "<function>" },
                            { "type": "name", "name": "cons" },
                            { "type": "name", "name": ":" },
                            { "type": "name", "name": "nil" },
                            { "type": "name", "name": "list" },
                            { "type": "funcode", "name": "<function>", "arity": 2, "fsize": 0, "ssize": 3, "ops": [3, 13, 2, 22, 3, 22, 24, 2, 8, 15], "rands": [1, 2, 0, 0, 2, 1, 2, 1, 134217728, 134217728] },
                            { "type": "name", "name": "seq" }]
                    },
                    {
                        "type": "funcode", "name": "exec", "arity": 1, "fsize": 3, "ssize": 7, "ops": [2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 0, 13, 1, 22, 24, 5, 0, 13, 1, 22, 3, 13, 1, 22, 3, 13, 24, 22, 24, 22, 24, 15, 5, 2, 9, 19, 9, 6, 17, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 0, 13, 1, 22, 24, 5, 0, 13, 1, 22, 3, 13, 1, 22, 1, 22, 1, 22, 3, 13, 24, 22, 24, 22, 24, 15, 5, 0, 13, 3, 13, 2, 22, 3, 13, 24, 22, 24, 22, 24, 15], "rands": [0, 40, 134217728, 39, 0, 134217728, 134217728, 40, 134217728, 0, 134217728, 40, 134217728, 1, 134217728, 40, 134217728, 1, 1, 0, 0, 1, 134217728, 2, 2, 0, 0, 1, 2, 1, 0, 2, 0, 0, 1, 2, 1, 2, 134217728, 134217728, 0, 88, 134217728, 87, 3, 134217728, 134217728, 88, 134217728, 0, 134217728, 88, 134217728, 1, 134217728, 88, 134217728, 2, 134217728, 88, 134217728, 1, 1, 0, 0, 1, 134217728, 2, 2, 0, 0, 3, 4, 0, 0, 1, 1, 2, 2, 2, 0, 0, 3, 4, 1, 2, 134217728, 134217728, 4, 1, 1, 2, 0, 0, 2, 0, 0, 1, 2, 0, 1, 134217728], "consts": [
                            { "type": "name", "name": "val" },
                            { "type": "name", "name": "_redefine" },
                            { "type": "name", "name": "_topdef" },
                            { "type": "name", "name": "fun" },
                            { "type": "name", "name": "_topval" }]
                    },
                    {
                        "type": "funcode", "name": "read_eval_print", "arity": 0, "fsize": 1, "ssize": 3, "ops": [3, 13, 24, 4, 0, 13, 1, 22, 6, 22, 24, 11, 0, 15, 0, 13, 24, 5, 3, 13, 6, 22, 1, 22, 24, 5, 0, 13, 3, 22, 6, 22, 24, 5, 0, 13, 3, 22, 24, 5, 3, 13, 1, 22, 24, 5, 0, 15], "rands": [1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 14, 2, 134217728, 3, 0, 0, 134217728, 2, 2, 4, 0, 0, 1, 2, 134217728, 5, 2, 3, 0, 4, 1, 2, 134217728, 6, 1, 4, 0, 1, 134217728, 5, 1, 0, 0, 1, 134217728, 7, 134217728], "consts": [
                            { "type": "name", "name": "=" },
                            { "type": "name", "name": "eof" },
                            { "type": "name", "name": "false" },
                            { "type": "name", "name": "_toptext" },
                            { "type": "number", "value": 0 },
                            { "type": "name", "name": "_set" },
                            { "type": "name", "name": "_setroot" },
                            { "type": "name", "name": "true" }]
                    }]
            },
            "_infixl": {
                "type": "funcode", "name": "_infixl", "arity": 2, "fsize": 0, "ssize": 7, "ops": [0, 13, 2, 22, 6, 22, 2, 22, 0, 13, 2, 22, 6, 22, 24, 22, 24, 15], "rands": [0, 4, 0, 0, 1, 1, 1, 2, 2, 2, 1, 0, 3, 1, 2, 3, 4, 134217728], "consts": [
                    { "type": "name", "name": "_token" },
                    { "type": "name", "name": "binop" },
                    { "type": "name", "name": "+" },
                    { "type": "number", "value": 1 }]
            },
            "_infixr": {
                "type": "funcode", "name": "_infixr", "arity": 2, "fsize": 0, "ssize": 5, "ops": [0, 13, 2, 22, 6, 22, 2, 22, 2, 22, 24, 15], "rands": [0, 4, 0, 0, 1, 1, 1, 2, 1, 3, 4, 134217728], "consts": [
                    { "type": "name", "name": "_token" },
                    { "type": "name", "name": "binop" }]
            },
            "_lsect": { "type": "funcode", "name": "_lsect", "arity": 2, "fsize": 0, "ssize": 3, "ops": [6, 14, 2, 23, 2, 23, 25, 15], "rands": [0, 2, 0, 1, 1, 2, 2, 134217728], "consts": [{ "type": "funcode", "name": "<function>", "arity": 1, "fsize": 0, "ssize": 3, "ops": [3, 13, 3, 22, 2, 22, 24, 15], "rands": [1, 2, 2, 0, 0, 1, 2, 134217728] }] },
            "_mapa": { "type": "funcode", "name": "_mapa", "arity": 3, "fsize": 2, "ssize": 6, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 2, 13, 1, 22, 3, 13, 2, 22, 1, 22, 2, 22, 24, 22, 24, 15, 10], "rands": [1, 5, 134217728, 2, 134217728, 1, 27, 134217728, 0, 134217728, 1, 0, 2, 0, 0, 0, 3, 0, 0, 1, 1, 2, 2, 3, 1, 2, 134217728, 134217728] },
            "_priority": {
                "type": "funcode", "name": "_priority", "arity": 1, "fsize": 1, "ssize": 3, "ops": [0, 13, 0, 22, 2, 22, 24, 4, 0, 13, 1, 22, 7, 22, 24, 11, 0, 13, 1, 22, 24, 15, 6, 6, 7, 8, 8, 15], "rands": [0, 2, 1, 0, 0, 1, 2, 0, 2, 2, 0, 0, 134217728, 1, 2, 22, 3, 1, 0, 0, 1, 134217728, 4, 4, 134217728, 134217728, 134217728, 134217728], "consts": [
                    { "type": "name", "name": "_lookup" },
                    { "type": "name", "name": "_syntax" },
                    { "type": "name", "name": "<>" },
                    { "type": "name", "name": "tail" },
                    { "type": "number", "value": 0 }]
            },
            "_range": {
                "type": "funcode", "name": "_range", "arity": 2, "fsize": 0, "ssize": 6, "ops": [0, 13, 2, 22, 2, 22, 24, 11, 7, 15, 0, 13, 2, 22, 3, 13, 0, 13, 2, 22, 6, 22, 24, 22, 2, 22, 24, 22, 24, 15], "rands": [0, 2, 0, 0, 1, 1, 2, 10, 134217728, 134217728, 1, 2, 0, 0, 0, 2, 2, 2, 0, 0, 3, 1, 2, 0, 1, 1, 2, 1, 2, 134217728], "consts": [
                    { "type": "name", "name": ">" },
                    { "type": "name", "name": ":" },
                    { "type": "name", "name": "+" },
                    { "type": "number", "value": 1 }]
            },
            "_rsect": { "type": "funcode", "name": "_rsect", "arity": 2, "fsize": 0, "ssize": 3, "ops": [6, 14, 2, 23, 2, 23, 25, 15], "rands": [0, 2, 0, 1, 1, 2, 2, 134217728], "consts": [{ "type": "funcode", "name": "<function>", "arity": 1, "fsize": 0, "ssize": 3, "ops": [3, 13, 2, 22, 3, 22, 24, 15], "rands": [1, 2, 0, 0, 2, 1, 2, 134217728] }] },
            "_tok": {
                "type": "funcode", "name": "_tok", "arity": 1, "fsize": 0, "ssize": 5, "ops": [0, 13, 2, 22, 2, 22, 6, 22, 6, 22, 24, 15], "rands": [0, 4, 0, 0, 0, 1, 1, 2, 1, 3, 4, 134217728], "consts": [
                    { "type": "name", "name": "_token" },
                    { "type": "number", "value": 0 }]
            },
            "_token": {
                "type": "funcode", "name": "_token", "arity": 4, "fsize": 0, "ssize": 7, "ops": [0, 13, 0, 22, 2, 22, 2, 2, 2, 7, 8, 8, 8, 22, 24, 15], "rands": [0, 3, 1, 0, 0, 1, 1, 2, 3, 134217728, 134217728, 134217728, 134217728, 2, 3, 134217728], "consts": [
                    { "type": "name", "name": "_update" },
                    { "type": "name", "name": "_syntax" }]
            },
            "_top": {
                "type": "funcode", "name": "_top", "arity": 0, "fsize": 1, "ssize": 3, "ops": [0, 13, 0, 13, 6, 22, 24, 22, 24, 11, 0, 13, 6, 22, 0, 13, 24, 22, 24, 12, 7, 5, 0, 13, 24, 4, 1, 13, 24, 15], "rands": [0, 1, 1, 1, 2, 0, 1, 0, 1, 20, 3, 2, 2, 0, 4, 0, 0, 1, 2, 21, 134217728, 134217728, 5, 0, 0, 0, 0, 0, 0, 134217728], "consts": [
                    { "type": "name", "name": "not" },
                    { "type": "name", "name": "_defined" },
                    { "type": "name", "name": "_syntax" },
                    { "type": "name", "name": "_topdef" },
                    { "type": "name", "name": "_hash" },
                    { "type": "name", "name": "__top" }]
            },
            "assoc": { "type": "funcode", "name": "assoc", "arity": 2, "fsize": 3, "ssize": 3, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 9, 19, 4, 20, 9, 19, 4, 20, 9, 18, 20, 4, 0, 13, 2, 22, 1, 22, 24, 11, 1, 15, 2, 1, 21, 5, 10], "rands": [1, 5, 134217728, 134217728, 134217728, 1, 34, 134217728, 33, 134217728, 0, 134217728, 33, 134217728, 1, 134217728, 33, 134217728, 134217728, 2, 0, 2, 0, 0, 0, 1, 2, 30, 1, 134217728, 0, 2, 2, 134217728, 134217728], "consts": [{ "type": "name", "name": "=" }] },
            "concat": { "type": "funcode", "name": "concat", "arity": 1, "fsize": 2, "ssize": 4, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 4, 20, 4, 0, 13, 1, 22, 3, 13, 1, 22, 24, 22, 24, 15, 10], "rands": [0, 5, 134217728, 134217728, 134217728, 0, 23, 134217728, 0, 134217728, 1, 0, 2, 0, 0, 0, 1, 1, 0, 1, 1, 2, 134217728, 134217728], "consts": [{ "type": "name", "name": "++" }] },
            "false": falsity,
            "filter": { "type": "funcode", "name": "filter", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 4, 20, 4, 2, 13, 1, 22, 24, 11, 0, 13, 1, 22, 3, 13, 2, 22, 1, 22, 24, 22, 24, 15, 2, 1, 21, 10], "rands": [1, 5, 134217728, 134217728, 134217728, 1, 34, 134217728, 0, 134217728, 1, 0, 1, 0, 0, 1, 31, 0, 2, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 2, 134217728, 0, 1, 2, 134217728], "consts": [{ "type": "name", "name": ":" }] },
            "foldl": { "type": "funcode", "name": "foldl", "arity": 3, "fsize": 2, "ssize": 4, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 2, 2, 13, 2, 22, 1, 22, 24, 1, 21, 10], "rands": [2, 5, 134217728, 1, 134217728, 2, 21, 134217728, 0, 134217728, 1, 0, 0, 2, 1, 0, 0, 1, 2, 1, 3, 134217728] },
            "foldr": { "type": "funcode", "name": "foldr", "arity": 3, "fsize": 2, "ssize": 6, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 2, 13, 1, 22, 3, 13, 2, 22, 2, 22, 1, 22, 24, 22, 24, 15, 10], "rands": [2, 5, 134217728, 1, 134217728, 2, 27, 134217728, 0, 134217728, 1, 0, 2, 0, 0, 0, 3, 0, 0, 1, 1, 1, 2, 3, 1, 2, 134217728, 134217728] },
            "length": {
                "type": "funcode", "name": "length", "arity": 1, "fsize": 2, "ssize": 3, "ops": [2, 9, 18, 6, 15, 2, 9, 19, 4, 20, 4, 0, 13, 3, 13, 1, 22, 24, 22, 6, 22, 24, 15, 10], "rands": [0, 5, 134217728, 0, 134217728, 0, 23, 134217728, 0, 134217728, 1, 1, 2, 0, 1, 1, 0, 1, 0, 2, 1, 2, 134217728, 134217728], "consts": [
                    { "type": "number", "value": 0 },
                    { "type": "name", "name": "+" },
                    { "type": "number", "value": 1 }]
            },
            "map": { "type": "funcode", "name": "map", "arity": 2, "fsize": 2, "ssize": 5, "ops": [2, 9, 18, 7, 15, 2, 9, 19, 4, 20, 4, 0, 13, 2, 13, 1, 22, 24, 22, 3, 13, 2, 22, 1, 22, 24, 22, 24, 15, 10], "rands": [1, 5, 134217728, 134217728, 134217728, 1, 29, 134217728, 0, 134217728, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 1, 1, 2, 1, 2, 134217728, 134217728], "consts": [{ "type": "name", "name": ":" }] },
            "not": {
                "type": "funcode", "name": "not", "arity": 1, "fsize": 0, "ssize": 1, "ops": [2, 11, 0, 15, 0, 15], "rands": [0, 4, 0, 134217728, 1, 134217728], "consts": [
                    { "type": "name", "name": "false" },
                    { "type": "name", "name": "true" }]
            },
            "reverse": { "type": "funcode", "name": "reverse", "arity": 1, "fsize": 1, "ssize": 3, "ops": [6, 14, 25, 4, 1, 13, 2, 22, 7, 22, 24, 15], "rands": [0, 0, 0, 0, 0, 2, 0, 0, 134217728, 1, 2, 134217728], "consts": [{ "type": "funcode", "name": "reva", "arity": 2, "fsize": 2, "ssize": 4, "ops": [2, 9, 18, 2, 15, 2, 9, 19, 4, 20, 4, 1, 0, 13, 1, 22, 2, 22, 24, 21, 10], "rands": [0, 5, 134217728, 1, 134217728, 0, 20, 134217728, 0, 134217728, 1, 1, 0, 2, 0, 0, 1, 1, 2, 2, 134217728], "consts": [{ "type": "name", "name": ":" }] }] },
            "true": truth
        };
    })(GeomJS.Bootstrap || (GeomJS.Bootstrap = {}));
    var Bootstrap = GeomJS.Bootstrap;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Common) {
        function arraycopy(src, srcStart, dest, destStart, length) {
            for (var i = 0; i < length; i++) {
                dest[destStart + i] = src[srcStart + i];
            }
        }
        Common.arraycopy = arraycopy;

        function clone(from) {
            if (from == null || typeof from != "object")
                return from;
            if (from.constructor != Object && from.constructor != Array)
                return from;
            if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function || from.constructor == String || from.constructor == Number || from.constructor == Boolean)
                return new from.constructor(from);

            var to = new from.constructor();

            for (var name in from) {
                to[name] = typeof to[name] == "undefined" ? clone(from[name]) : to[name];
            }

            return to;
        }
        Common.clone = clone;

        function objectEquals(x, y) {
            if (x && x.name !== undefined && y && y.name !== undefined) {
                return x.name == y.name;
            }

            if (x instanceof Function || y instanceof Function) {
                return true;
            }

            if (x === null || x === undefined) {
                if (y && y.type == "Func") {
                    return true;
                }
            }
            if (y === null || y === undefined) {
                if (x && x.type == "Func") {
                    return true;
                }
            }

            if (x === null || x === undefined || y === null || y === undefined) {
                return x === y;
            }
            if (x === y || x.valueOf() === y.valueOf()) {
                return true;
            }

            if (x instanceof Date) {
                return false;
            }
            if (y instanceof Date) {
                return false;
            }

            if (!(x instanceof Object)) {
                return false;
            }
            if (!(y instanceof Object)) {
                return false;
            }

            var p = Object.keys(x);
            return Object.keys(y).every(function (i) {
                return y[i] instanceof Function || p.indexOf(i) !== -1;
            }) ? p.every(function (i) {
                return objectEquals(x[i], y[i]);
            }) : false;
        }
        Common.objectEquals = objectEquals;

        function indexOfArr(arr, fnd) {
            for (var i = 0; i < arr.length; i++) {
                if (!(i in arr)) {
                    continue;
                }
                if (objectEquals(arr[i], fnd)) {
                    return i;
                }
            }
            return -1;
        }

        var Map = (function () {
            function Map(init) {
                this.keys = [];
                this.values = [];
                this.index = -1;
                this.keys = [];
                this.values = [];
                if (init) {
                    init.forEach(function (i) {
                        this.set(i[0], i[1]);
                    }, this);
                }
            }
            Map.prototype.get = function (key) {
                return this.has(key) ? this.values[this.index] : undefined;
            };
            Map.prototype.has = function (key) {
                this.index = indexOfArr(this.keys, key);
                return -1 < this.index;
            };
            Map.prototype.set = function (key, value) {
                this.has(key) ? this.values[this.index] = value : this.values[this.keys.push(key) - 1] = value;
            };
            Map.prototype.getIterator = function () {
                var copykeys = this.keys.slice(0);
                var copyvalues = this.values.slice(0);
                var res = [];
                for (var i = 0; i < copykeys.length; i++) {
                    res.push([copykeys[i], copyvalues[i]]);
                }
                return res;
            };
            return Map;
        })();
        Common.Map = Map;
    })(GeomJS.Common || (GeomJS.Common = {}));
    var Common = GeomJS.Common;
})(GeomJS || (GeomJS = {}));

var GeomJS;
(function (GeomJS) {
    (function (Funbase) {
        var WrongKindException = (function () {
            function WrongKindException() {
            }
            return WrongKindException;
        })();
        Funbase.WrongKindException = WrongKindException;
        var ClassCastException = (function () {
            function ClassCastException() {
            }
            return ClassCastException;
        })();
        Funbase.ClassCastException = ClassCastException;
        var Throwable = (function () {
            function Throwable() {
            }
            return Throwable;
        })();
        Funbase.Throwable = Throwable;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";

        /** This class provides the context for evaluating paragraphs: it imposes
        *  resource limits, and deals with errors that occur during evaluation.
        */
        var Evaluator = (function () {
            function Evaluator() {
            }
            Evaluator.execute = function (fun) {
                var args = [];
                for (var _i = 0; _i < (arguments.length - 1); _i++) {
                    args[_i] = arguments[_i + 1];
                }
                this.runFlag = true;
                this.steps = 0;
                this.conses = 0;
                this.endTimeUtc = Date.now() + this.timeLimit;
                Funbase.Interp.get.initStack();
                var result = fun.apply(args, args.length, 0);
                this.checkpoint();

                return result;
            };

            Evaluator.checkpoint = function () {
                this.steps += (this.QUANTUM - this.quantum); // quantum interats with interp.ts
                if (this.stepLimit > 0 && this.steps > this.stepLimit) {
                    throw new Evaluator.EvalError("#steps");
                }
                if (!this.runFlag) {
                    throw new Evaluator.EvalError("#time");
                }

                this.quantum = this.QUANTUM;
            };

            Evaluator.countCons = function () {
                this.conses += 1;
                if (this.consLimit > 0 && this.conses > this.consLimit) {
                    throw new Evaluator.EvalError("#memory");
                }
            };

            Evaluator.setLimits = function (timeLimit, stepLimit, consLimit) {
                Evaluator.timeLimit = timeLimit;
                Evaluator.stepLimit = stepLimit;
                Evaluator.consLimit = consLimit;
            };

            Evaluator.printStats = function () {
                console.log("(" + this.steps + " step(s)" + ", " + this.conses + "conse(s)" + ")");
            };

            Evaluator.error = function (errtag) {
                var args = [];
                for (var _i = 0; _i < (arguments.length - 1); _i++) {
                    args[_i] = arguments[_i + 1];
                }
                throw new Evaluator.EvalError(errtag, args, "");
            };

            Evaluator.expect = function (name, expected) {
                //var context: string[] = FunCode.getContext(null);
                this.error("#expect", "", expected);
            };

            // Complain about calling a non-function
            Evaluator.errApply = function () {
                this.error("#apply");
            };

            // Complain about pattern-matching with a non-constructor
            Evaluator.errMatch = function () {
                this.error("#constr");
            };

            // Complain when the wrong number of arguments is provided
            Evaluator.errNargs = function (name, nargs, arity) {
                if (nargs === 1) {
                    this.error("#numargs1", name, arity);
                } else {
                    this.error("#numargs", name, nargs, arity);
                }
            };

            // Complain when no pattern matches in a function definition
            Evaluator.errNoMatch = function (args, base, arity) {
                var buf = "";
                if (arity > 0) {
                    buf += (args[base + 0]);
                    for (var i = 1; i < arity; i++) {
                        buf += (", " + args[base + i]);
                    }
                }

                if (arity === 1) {
                    this.error("#match1", buf);
                } else {
                    this.error("#match", buf);
                }
            };

            // Complain about an undefined name
            Evaluator.errNotDef = function (x) {
                this.error("#undef", x);
            };

            // Complain about a non-boolean guard or 'if' condition
            Evaluator.errBoolCond = function () {
                this.error("#condbool");
            };

            /* Complain about matching against a constructor with the
            *  wrong number of argument patterns
            */
            Evaluator.errPatNargs = function (name) {
                this.error("#patnargs", name);
            };

            Evaluator.listFail = function (xs, msg) {
                this.error(msg, xs.type === "nil" ? "this empty list" : "a non-list");
            };
            Evaluator.debug = 0;

            Evaluator.QUANTUM = 10000;
            Evaluator.quantum = 10000;

            Evaluator.timeLimit = 30000;
            Evaluator.stepLimit = 500000000;
            Evaluator.consLimit = 10000000;
            return Evaluator;
        })();
        Funbase.Evaluator = Evaluator;

        Funbase.Primitive.store("_error", function (prim, tag, args) {
            Evaluator.error(Funbase.Value.string(tag), Funbase.Value.array(args));
            return null;
        });

        Funbase.Primitive.store("_limit", function (prim, time, steps, conses) {
            Evaluator.setLimits(Funbase.Value.number(time), Funbase.Value.number(steps), Funbase.Value.number(conses));
            return Funbase.Value.nil;
        });
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));

var GeomJS;
(function (GeomJS) {
    (function (Funbase) {
        // The TypeScript way of doing nested classes
        (function (Evaluator) {
            "use strict";

            // An exception raised because of a run-time error
            var EvalError = (function () {
                function EvalError(errtag, args, context) {
                    if (typeof args === "undefined") { args = null; }
                    if (typeof context === "undefined") { context = null; }
                    this.errtag = errtag;
                    this.args = args;
                    this.context = context;
                }
                return EvalError;
            })();
            Evaluator.EvalError = EvalError;
        })(Funbase.Evaluator || (Funbase.Evaluator = {}));
        var Evaluator = Funbase.Evaluator;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";

        (function (Func) {
            "use strict";
            function nullFunction() {
                return {
                    type: "Func",
                    arity: -1,
                    apply: function (args, nargs, base) {
                        Funbase.Evaluator.errApply();
                        return null;
                    },
                    pattMatch: function (obj, nargs) {
                        Funbase.Evaluator.errMatch();
                        return null;
                    }
                };
            }
            Func.nullFunction = nullFunction;

            Funbase.Primitive.store("_apply", function (prim, x, y) {
                var args = Funbase.Value.array(y);
                return Funbase.Value.apply(x, args);
            });

            Funbase.Primitive.store("_closure", function (prim, x) {
                var body = Funbase.Value.funcode(x);
                return Funbase.FunCode.makeClosure(body, [undefined]);
            });
        })(Funbase.Func || (Funbase.Func = {}));
        var Func = Funbase.Func;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";

        /** Assemble a list of instructions into a function body */
        Funbase.Primitive.store("_assemble", function (prim, name, arity, fsize, ssize, code) {
            var instrs = [];
            var rands = [];
            var ip = 0;
            var consts = [];

            for (var xs = code; Funbase.Value.isCons(xs); xs = Funbase.Value.tail(xs)) {
                var inst = Funbase.Value.head(xs);
                var x = Funbase.Value.name(Funbase.Value.head(inst)).name;
                var op = FunCode.Opcode[x];
                var args = Funbase.Value.tail(inst);
                var rand;

                if (!Funbase.Value.isCons(args)) {
                    /* No argument */
                    rand = FunCode.NO_RAND;
                } else {
                    var v = Funbase.Value.head(args);
                    switch (op) {
                        case 0 /* GLOBAL */:
                        case 6 /* QUOTE */:
                        case 16 /* MPLUS */:
                            /* An argument that goes in the constant pool */
                            rand = consts.indexOf(v);
                            if (rand < 0) {
                                rand = consts.length;
                                consts.push(v);
                            }
                            break;
                        default:
                            /* An integer argument */
                            rand = Funbase.Value.number(v);
                            break;
                    }
                }

                instrs[ip] = op;
                rands[ip] = rand;
                ip++;
            }
            return FunCode.create(name.toString(), Funbase.Value.number(arity), Funbase.Value.number(fsize), Funbase.Value.number(ssize), instrs, rands, consts);
        });

        (function (FunCode) {
            "use strict";
            FunCode.NO_RAND = 0x8000000;
            function create(name, arity, fsize, ssize, ops, rands, consts) {
                if (typeof consts === "undefined") { consts = null; }
                var ret = {
                    "type": "funcode",
                    "arity": arity,
                    "name": name,
                    "fsize": fsize,
                    "ssize": ssize,
                    "ops": ops,
                    "rands": rands,
                    subr: Funbase.Func.nullFunction()
                };
                if (consts) {
                    ret["consts"] = consts;
                }
                return ret;
            }
            FunCode.create = create;

            /** Construct a wrapped closure and tie the knot for local recursion */
            function makeClosure(code, fvars) {
                var result = {
                    type: "funvalue",
                    name: code.name,
                    subr: Funbase.Interp.get.translate(code, fvars)
                };
                fvars[0] = result;
                return result;
            }
            FunCode.makeClosure = makeClosure;

            /** Enumerated type of opcodes for the Fun machine */
            (function (Opcode) {
                Opcode[Opcode["GLOBAL"] = 0] = "GLOBAL";

                Opcode[Opcode["LOCAL"] = 1] = "LOCAL";
                Opcode[Opcode["ARG"] = 2] = "ARG";
                Opcode[Opcode["FVAR"] = 3] = "FVAR";
                Opcode[Opcode["BIND"] = 4] = "BIND";
                Opcode[Opcode["POP"] = 5] = "POP";
                Opcode[Opcode["QUOTE"] = 6] = "QUOTE";

                Opcode[Opcode["NIL"] = 7] = "NIL";
                Opcode[Opcode["CONS"] = 8] = "CONS";
                Opcode[Opcode["TRAP"] = 9] = "TRAP";
                Opcode[Opcode["FAIL"] = 10] = "FAIL";
                Opcode[Opcode["JFALSE"] = 11] = "JFALSE";

                Opcode[Opcode["JUMP"] = 12] = "JUMP";

                Opcode[Opcode["PREP"] = 13] = "PREP";
                Opcode[Opcode["CLOPREP"] = 14] = "CLOPREP";
                Opcode[Opcode["RETURN"] = 15] = "RETURN";
                Opcode[Opcode["MPLUS"] = 16] = "MPLUS";

                Opcode[Opcode["MEQ"] = 17] = "MEQ";
                Opcode[Opcode["MNIL"] = 18] = "MNIL";
                Opcode[Opcode["MCONS"] = 19] = "MCONS";
                Opcode[Opcode["GETTAIL"] = 20] = "GETTAIL";
                Opcode[Opcode["TCALL"] = 21] = "TCALL";
                Opcode[Opcode["PUTARG"] = 22] = "PUTARG";
                Opcode[Opcode["PUTFVAR"] = 23] = "PUTFVAR";
                Opcode[Opcode["CALL"] = 24] = "CALL";
                Opcode[Opcode["CLOSURE"] = 25] = "CLOSURE";
                Opcode[Opcode["MPRIM"] = 26] = "MPRIM";
            })(FunCode.Opcode || (FunCode.Opcode = {}));
            var Opcode = FunCode.Opcode;
        })(Funbase.FunCode || (Funbase.FunCode = {}));
        var FunCode = Funbase.FunCode;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        var GeomBase = (function () {
            function GeomBase() {
            }
            GeomBase.prototype.run = function () {
            };

            GeomBase.prototype.scan = function () {
                return this.scanner.nextToken();
            };

            /** Called when evaluation of a top-level expression is complete */
            GeomBase.prototype.exprValue = function (v) {
                this.last_val = v;
                this.display("--> " + Funbase.Value.print(v));
            };

            /** Called when elaboration of a top-level definition is complete */
            GeomBase.prototype.defnValue = function (n, v) {
                this.last_val = v;
                Funbase.Name.set(n.name, v);
                this.display("--- " + n.name + " = " + Funbase.Value.print(v));
            };

            /** Called when a phrase has been parsed */
            GeomBase.prototype.showPhrase = function () {
                this.echo(this.scanner.getText());
            };

            GeomBase.prototype.eval_loop = function (reader, echo, display, statsOut) {
                var top = Funbase.Name.find("_top");
                var scanner = new Funbase.Scanner(reader);
                var errtag = "";
                var last_val = null;
                this.echo = echo;
                this.display = display;

                while (true) {
                    //try {
                    scanner.resetText();
                    this.scanner = scanner;
                    if (!Funbase.Value.boolean(Funbase.Evaluator.execute(top.subr)))
                        return true;
                    /*}
                    catch (e) {
                    if (e instanceof Scanner.SyntaxError) {
                    console.log("#syntax");
                    //syntaxError(e);
                    return false;
                    }
                    else if (e instanceof Evaluator.EvalError) {
                    console.log("#runtime");
                    //runtimeError(e);
                    return false;
                    }
                    else if (e instanceof Throwable) {
                    console.log("#failure");
                    //failure(e);
                    return false;
                    } else {
                    console.log("uncaught!!");
                    }
                    }*/
                }
            };
            GeomBase.theApp = new GeomBase();
            return GeomBase;
        })();
        Funbase.GeomBase = GeomBase;

        Funbase.Primitive.store("_scan", function (prim) {
            return GeomBase.theApp.scan();
        });

        Funbase.Primitive.store("_synerror", function (prim, tag, args) {
            GeomBase.theApp.scanner.syntax_error(Funbase.Value.string(tag), Funbase.Value.array(args));
            return Funbase.Value.nil;
        });

        Funbase.Primitive.store("_setroot", function (prim, v) {
            Funbase.Interp.get.setRoot(v);

            //TODO: Evaluator.startTimer();
            return Funbase.Value.nil;
        });

        Funbase.Primitive.store("_topval", function (prim, v) {
            GeomBase.theApp.exprValue(v);
            return Funbase.Value.nil;
        });

        Funbase.Primitive.store("_topdef", function (prim, x, v) {
            var n = Funbase.Value.name(x);
            v['name'] = n.name;
            GeomBase.theApp.defnValue(n, v);
            return Funbase.Value.nil;
        });

        Funbase.Primitive.store("_toptext", function (prim) {
            GeomBase.theApp.showPhrase();
            return Funbase.Value.nil;
        });

        /*Primitive.store("_load", function (fname0: Value): Value {
        var fname = prim.string(fname0);
        var current = GeomBase.theApp.getCurrentFile();
        var file = (current == null ? new File(fname) : new File(current.getParentFile(), fname));
        GeomBase.theApp.loadFromFile(file, false);
        return Value.nil;
        });*/
        Funbase.Primitive.store("_print", function (prim, v) {
            console.log(Funbase.Value.print(v));

            /*Thread.yield();*/
            return Funbase.Value.nil;
        });

        Funbase.Primitive.store("_debug", function (prim) {
            return Funbase.NumValue.create(Funbase.Evaluator.debug);
        });

        Funbase.Primitive.store("_install", function (prim, name) {
            var packageName = Funbase.Value.string(name);
            var toInstall = {};
            if (packageName == "") {
                //toInstall = thatPackage.primitives;
            } else if (packageName == "BasicPrims") {
                Funbase.BasicPrims.install();
            } else if (packageName == "Cell") {
                Funbase.Cell.install();
            } else if (packageName == "Hash") {
                Funbase.Hash.install();
            } else if (packageName == "StringPrims") {
                Funbase.StringPrims.install();
            } else {
                //TODO: ERROR
            }

            return Funbase.Value.nil;
        });
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";

        /** A trivial runtime translator that interprets the funcode */
        var Interp = (function () {
            function Interp() {
                this.root = null;
                this.count = 0;
            }
            Interp.prototype.translate = function (funcode, fvars) {
                var _this = this;
                return {
                    type: "func",
                    arity: funcode.arity,
                    apply: function (args, nargs, base) {
                        return _this.apply(funcode.arity, funcode, fvars, args, base, nargs);
                    },
                    pattMatch: function (obj, nargs) {
                        return null;
                    },
                    code: funcode
                };
            };

            Interp.prototype.initStack = function () {
                Interp.stack = [];
                this.root = null;
            };

            Interp.prototype.setRoot = function (root) {
                this.root = Funbase.Value.funcode(root);
            };

            Interp.prototype.logg = function (str) {
            };

            Interp.prototype.LogValue = function (val) {
                if (val) {
                    if (val.type === "nil")
                        this.logg("nil\n");
                    else if (val.type === "cell") {
                        this.logg("Cell: ");
                        this.LogValue(val.value);
                        this.logg("\n");
                    } else if (val.type === "listvalue") {
                        this.logg("Cons(");
                        this.LogValue(Funbase.Value.head(val));
                        this.logg(", ");
                        this.LogValue(Funbase.Value.tail(val));
                        this.logg(")");
                    } else if (val.value !== undefined)
                        this.logg(val.value + "\n");
                    else if (val.name)
                        this.logg(val.name + "\n");
                    else if (val.type === "hash")
                        this.logg(val.type + "\n");
                    else
                        this.logg("un\n");
                } else {
                    this.logg("undef\n");
                }
            };

            Interp.prototype.apply = function (arity, code, fvars, args, base, nargs) {
                Interp.stack.push(code);

                if (nargs != arity)
                    Funbase.Evaluator.errNargs(code.name, nargs, arity);

                if (--Funbase.Evaluator.quantum <= 0)
                    Funbase.Evaluator.checkpoint();

                var instrs = code.ops;
                var rands = code.rands;
                var frame = new Array(code.fsize + code.ssize);
                var pc = 0;
                var trap = -1;
                var sp = code.fsize;

                for (; ;) {
                    var op = instrs[pc];
                    var rand = rands[pc];

                    if (rand == Funbase.FunCode.NO_RAND) {
                        rand = 0; //TODO: Remove this if (added for debugging).
                    }
                    pc++;

                    this.logg(Funbase.FunCode.Opcode[op].toString() + " " + (this.count++) + " " + rand + " " + sp + " " + pc + "\n");
                    this.logg(frame.length + "\n");
                    for (var i = 0; i < frame.length; i++) {
                        this.LogValue(frame[i]);
                    }
                    for (var i = 0; i < fvars.length; i++) {
                        this.LogValue(fvars[i]);
                    }
                    this.logg("\n");

                    if (this.count === 190416) {
                        console.log("b");
                    }

                    switch (op) {
                        case 0 /* GLOBAL */: {
                            var x = Funbase.Value.name(code.consts[rand]);
                            var v = Funbase.Name.getGlodef(x);
                            if (!v) {
                                Funbase.Evaluator.errNotDef(x);
                            }
                            frame[sp++] = v;
                            break;
                        }

                        case 1 /* LOCAL */:
                            frame[sp++] = frame[rand];
                            break;

                        case 2 /* ARG */:
                            frame[sp++] = args[base + rand];
                            break;

                        case 3 /* FVAR */:
                            frame[sp++] = fvars[rand];
                            break;

                        case 4 /* BIND */:
                            frame[rand] = frame[--sp];
                            break;

                        case 5 /* POP */:
                            sp--;
                            break;

                        case 6 /* QUOTE */:
                            frame[sp++] = code.consts[rand];
                            break;

                        case 7 /* NIL */:
                            frame[sp++] = Funbase.Value.nil;
                            break;

                        case 8 /* CONS */:
                            sp--;
                            frame[sp - 1] = Funbase.Value.cons(frame[sp - 1], frame[sp]);
                            break;

                        case 24 /* CALL */:
                            sp -= rand;
                            var fun = frame[sp - 1];
                            frame[sp - 1] = fun.subr.apply(frame, rand, sp);
                            break;

                        case 21 /* TCALL */:
                            if (rand != nargs)
                                Funbase.Evaluator.errNargs(code.name, rand, nargs);
                            sp -= rand;
                            GeomJS.Common.arraycopy(frame, sp, args, base, nargs);
                            pc = 0;
                            trap = -1;
                            sp = code.fsize;
                            if (--Funbase.Evaluator.quantum <= 0)
                                Funbase.Evaluator.checkpoint();
                            break;

                        case 25 /* CLOSURE */: {
                            sp -= rand;
                            var body = Funbase.Value.funcode(frame[sp - 1]);
                            var fvars2 = new Array(rand + 1);
                            GeomJS.Common.arraycopy(frame, sp, fvars2, 1, rand);
                            frame[sp - 1] = Funbase.FunCode.makeClosure(body, fvars2);
                            break;
                        }

                        case 9 /* TRAP */:
                            trap = rand;
                            break;

                        case 10 /* FAIL */:
                            Funbase.Evaluator.errNoMatch(args, base, code.arity);
                            break;

                        case 11 /* JFALSE */:
                            try  {
                                var b = frame[--sp];
                                if (!Funbase.Value.boolean(b))
                                    pc = rand;
                            } catch (e) {
                                if (e instanceof Funbase.WrongKindException) {
                                    Funbase.Evaluator.errBoolCond();
                                } else {
                                    throw e;
                                }
                            }
                            break;

                        case 12 /* JUMP */:
                            pc = rand;
                            break;

                        case 15 /* RETURN */:
                            Interp.stack.splice(Interp.stack.length - 1, 1);
                            return frame[--sp];

                        case 16 /* MPLUS */:
                            try  {
                                sp -= 1;
                                var a = frame[sp];
                                var v2 = Funbase.Value.matchPlus(a, code.consts[rand]);
                                if (v2)
                                    frame[sp++] = v2;
                                else
                                    pc = trap;
                            } catch (e) {
                                if (e instanceof Funbase.ClassCastException) {
                                    pc = trap;
                                } else {
                                    throw e;
                                }
                            }
                            break;

                        case 17 /* MEQ */:
                            sp -= 2;
                            if (!GeomJS.Common.objectEquals(frame[sp], (frame[sp + 1])))
                                pc = trap;
                            break;

                        case 18 /* MNIL */:
                            if (frame[--sp].type !== "nil")
                                pc = trap;
                            break;

                        case 19 /* MCONS */: {
                            try  {
                                var cell = frame[sp - 1];
                                frame[sp] = Funbase.Value.head(cell);
                                sp += 1;
                            } catch (e) {
                                if (e instanceof Funbase.ClassCastException) {
                                    pc = trap;
                                } else {
                                    throw e;
                                }
                            }
                            break;
                        }

                        case 20 /* GETTAIL */:
                            frame[sp - 1] = Funbase.Value.tail(frame[sp - 1]);
                            break;

                        case 26 /* MPRIM */: {
                            var cons = frame[--sp];
                            var obj = frame[--sp];
                            var vs = cons.subr.pattMatch(obj, rand);
                            if (!vs)
                                pc = trap;
                            else {
                                GeomJS.Common.arraycopy(vs, 0, frame, sp, rand);
                                sp += rand;
                            }
                            break;
                        }

                        case 13 /* PREP */:
                        case 22 /* PUTARG */:
                        case 14 /* CLOPREP */:
                        case 23 /* PUTFVAR */:
                            break;

                        default:
                            throw new Error("bad opcode " + op);
                    }
                }
            };
            Interp.get = new Interp();
            return Interp;
        })();
        Funbase.Interp = Interp;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";

        (function (Name) {
            var nameTable = {};

            function bootstrap(boot) {
                for (var defn in boot) {
                    if (!boot.hasOwnProperty(defn)) {
                        continue;
                    }
                    var body = boot[defn];
                    if (body && body.type == "funcode") {
                        set(defn, Funbase.FunCode.makeClosure(boot[defn], [undefined]));
                    } else {
                        set(defn, boot[defn]);
                    }
                }
            }
            Name.bootstrap = bootstrap;

            function create(value) {
                return {
                    "type": "name",
                    "name": value,
                    "subr": Funbase.Func.nullFunction()
                };
            }
            Name.create = create;

            function getGlodef(n) {
                var prim = Funbase.Primitive.find(n.name);
                if (prim) {
                    return prim;
                }

                return nameTable[n.name];
            }
            Name.getGlodef = getGlodef;

            /** Find or create the unique Name with a given spelling */
            function find(tag) {
                var prim = Funbase.Primitive.find(tag);
                if (prim) {
                    return prim;
                }

                var name = nameTable[tag];
                if (!name) {
                    name = {
                        type: "name",
                        name: tag,
                        subr: Funbase.Func.nullFunction()
                    };
                    nameTable[tag] = name;
                }
                return name;
            }
            Name.find = find;

            function set(tag, val) {
                nameTable[tag] = Funbase.Value.name(val);
            }
            Name.set = set;

            /** Get alphabetical list of globally defined names */
            function getGlobalNames() {
                var names = [];

                for (var tag in nameTable) {
                    if (!(tag[0] === "_")) {
                        names.push(tag);
                    }
                }

                return names.sort();
            }
            Name.getGlobalNames = getGlobalNames;

            Funbase.Primitive.store("_defined", function (prim, x) {
                var n = Funbase.Value.name(x);
                if (getGlodef(n))
                    return Funbase.BoolValue.create(true);
                else
                    return Funbase.BoolValue.create(false);
            });

            Funbase.Primitive.store("_glodef", function (prim, x) {
                var n = Funbase.Value.name(x);
                var v = getGlodef(n);
                if (!v) {
                    Funbase.Evaluator.errNotDef(n);
                }
                return v;
            });

            Funbase.Primitive.store("_redefine", function (prim, x) {
                var n = Funbase.Value.name(x);

                /*if (n.isFrozen()) {
                Evaluator.error("#redef", x);
                }*/
                return Funbase.Value.nil;
            });

            Funbase.Primitive.store("_spelling", function (prim, x) {
                var n = Funbase.Value.name(x);
                return Funbase.StringValue.create(n.name);
            });

            Name._g = 0;

            Funbase.Primitive.store("_gensym", function (prim, x) {
                Name._g += 1;
                return Name.find("$g" + Name._g);
            });
        })(Funbase.Name || (Funbase.Name = {}));
        var Name = Funbase.Name;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
///<reference path="../references.ts"/>
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        "use strict";
        var Scanner = (function () {
            function Scanner(reader) {
                this.push_back = "";
                this.line_num = 1;
                this.char_num = 0;
                this.start_char = 0;
                this.root_char = 0;
                /* The scanner keeps track of the text that has been scanned, so that
                * the defining text can be saved with each name in the global env.
                * The variable 'virgin' indicates whether we are skipping characters that
                * come before the first token of the text. */
                this.text = "";
                this.virgin = true;
                this.reader = reader;
            }
            Scanner.prototype.readChar = function () {
                var ich = this.reader.read();
                if (ich < 0) {
                    return 0;
                }
                return ich;
            };

            Scanner.prototype.getChar = function () {
                this.char_num += 1;
                var ch = "";
                var ci = 0;
                if (this.push_back.length === 0) {
                    ci = this.readChar();
                    ch = String.fromCharCode(ci);
                } else {
                    var i = this.push_back.length - 1;
                    ch = this.push_back[i];
                    ci = ch.charCodeAt(0);
                    this.push_back = this.push_back.substring(0, i);
                }

                if (ci !== 0) {
                    this.text += ch;
                }

                return ch;
            };

            /** Push back one character onto the input */
            Scanner.prototype.pushBack = function (ch) {
                if (ch !== String.fromCharCode(0)) {
                    this.char_num -= 1;
                    this.push_back += ch;
                    this.text = this.text.slice(0, -1);
                }
            };

            Scanner.prototype.getText = function () {
                return this.text;
            };

            Scanner.prototype.resetText = function () {
                this.text = "";
                this.virgin = true;
            };

            /** Initialize atoms used as tokens */
            Scanner.prototype.initTokens = function () {
                this.ATOM = Funbase.Name.find("atom");
                this.BRA = Funbase.Name.find("bra");
                this.COMMA = Funbase.Name.find("comma");
                this.EOF = Funbase.Name.find("eof");
                this.EOL = Funbase.Name.find("eol");
                this.KET = Funbase.Name.find("ket");
                this.LPAR = Funbase.Name.find("lpar");
                this.NUMBER = Funbase.Name.find("number");
                this.RPAR = Funbase.Name.find("rpar");
                this.SEMI = Funbase.Name.find("semi");
                this.STRING = Funbase.Name.find("string");
                this.VBAR = Funbase.Name.find("vbar");
                this.OP = Funbase.Name.find("op");
                this.IDENT = Funbase.Name.find("ident");
            };

            Scanner.prototype.isOpChar = function (ch) {
                return Scanner.opchars.indexOf(ch) !== -1;
            };

            Scanner.prototype.isLetter = function (ch) {
                return Scanner.letters.indexOf(ch) !== -1;
            };

            Scanner.prototype.isDigit = function (ch) {
                return Scanner.digits.indexOf(ch) !== -1;
            };

            Scanner.prototype.scan = function () {
                if (Funbase.Name.find("atom") !== this.ATOM) {
                    this.initTokens();
                }

                this.start_char = this.char_num;
                var ch = this.getChar();
                this.tok = null;
                this.sym = Funbase.Value.nil;
                while (this.tok == null) {
                    switch (ch) {
                        case "\0":
                            this.tok = this.EOF;
                            break;
                        case " ":
                        case "\t":
                        case "\r":
                            this.start_char = this.char_num;
                            if (this.virgin) {
                                this.resetText();
                            }
                            ch = this.getChar();
                            break;
                        case "\n":
                            this.line_num++;
                            this.start_char = this.char_num;
                            if (this.virgin) {
                                this.resetText();
                            }
                            ch = this.getChar();
                            break;
                        case "{":
                            var depth = 0;
                            do {
                                if (ch === "{") {
                                    depth++;
                                } else if (ch === "}") {
                                    depth--;
                                } else if (ch === "\n") {
                                    this.line_num++;
                                } else if (ch === "\0") {
                                    this.start_char = this.char_num;
                                    this.tok = this.EOF;
                                    this.syntax_error("#comment");
                                }

                                ch = this.getChar();
                            } while(depth > 0);
                            break;
                        case "}":
                            this.syntax_error("#bracematch");
                            break;
                        case "(":
                            this.tok = this.LPAR;
                            break;
                        case ")":
                            this.tok = this.RPAR;
                            break;
                        case "[":
                            this.tok = this.BRA;
                            break;
                        case "]":
                            this.tok = this.KET;
                            break;
                        case ",":
                            this.tok = this.COMMA;
                            break;
                        case ";":
                            this.tok = this.SEMI;
                            break;
                        case "|":
                            this.tok = this.VBAR;
                            break;
                        case '"':
                            var str = "";
                            ch = this.getChar();
                            while (ch !== '"' && ch !== "\n" && ch !== "\0") {
                                str += ch;
                                ch = this.getChar();
                            }
                            if (ch === '"') {
                                this.tok = this.STRING;
                                this.sym = Funbase.StringValue.create(str);
                            } else {
                                this.pushBack(ch);
                                this.start_char = this.char_num;
                                this.tok = (ch === "\n" ? this.EOL : this.EOF);
                                this.syntax_error("#string");
                            }
                            break;
                        case "#":
                            var buf = "";
                            ch = this.getChar();
                            if (this.isLetter(ch) || ch === "_") {
                                while (this.isLetter(ch) || this.isDigit(ch) || ch === "_") {
                                    buf += ch;
                                    ch = this.getChar();
                                }
                            } else if (this.isOpChar(ch)) {
                                while (this.isOpChar(ch)) {
                                    buf += ch;
                                    ch = this.getChar();
                                }
                            } else {
                                this.syntax_error("#idop");
                            }
                            this.pushBack(ch);
                            this.tok = this.ATOM;
                            this.sym = Funbase.Name.find(buf.toString());
                            break;
                        default:
                            if (this.isLetter(ch) || ch === "_") {
                                // An identifier
                                var buf = "";
                                while (this.isLetter(ch) || this.isDigit(ch) || ch === "_") {
                                    buf += ch;
                                    ch = this.getChar();
                                }
                                this.pushBack(ch);
                                var x = Funbase.Name.find(buf.toString());
                                this.tok = this.IDENT;
                                this.sym = x;
                            } else if (this.isDigit(ch)) {
                                // A numeric constant
                                var buf = "";
                                while (this.isDigit(ch)) {
                                    buf += ch;
                                    ch = this.getChar();
                                }
                                if (ch === ".") {
                                    buf += ch;
                                    ch = this.getChar();
                                    if (!this.isDigit(ch)) {
                                        this.pushBack(ch);
                                        ch = ".";
                                    } else {
                                        while (this.isDigit(ch)) {
                                            buf += ch;
                                            ch = this.getChar();
                                        }
                                    }
                                }
                                if (ch === "E") {
                                    buf += (ch);
                                    ch = this.getChar();
                                    if (ch === "+" || ch === "-") {
                                        buf += ch;
                                        ch = this.getChar();
                                    }
                                    if (!this.isDigit(ch)) {
                                        this.badToken();
                                    }
                                    do {
                                        buf += ch;
                                        ch = this.getChar();
                                    } while(this.isDigit(ch));
                                }
                                this.pushBack(ch);
                                this.tok = this.NUMBER;
                                var val = Number(buf);
                                this.sym = Funbase.NumValue.create(val);
                            } else if (this.isOpChar(ch)) {
                                // A symbolic operator
                                var buf = "";
                                while (this.isOpChar(ch)) {
                                    buf += ch;
                                    ch = this.getChar();
                                }
                                this.pushBack(ch);
                                var x = Funbase.Name.find(buf);
                                this.tok = this.OP;
                                this.sym = x;
                            } else {
                                this.badToken();
                            }
                    }
                }

                if (this.virgin) {
                    this.root_char = this.start_char;
                    this.virgin = false;
                }
            };

            Scanner.prototype.nextToken = function () {
                this.scan();
                return Funbase.Value.makeList(this.tok, this.sym);
            };

            Scanner.prototype.badToken = function () {
                this.syntax_error("#badtok");
            };

            Scanner.prototype.error_chars = function () {
                if (this.tok === this.EOF) {
                    return "end of input";
                } else if (this.tok === this.EOL) {
                    return "end of line";
                } else {
                    return "'" + this.text.substring(this.start_char - this.root_char) + "'";
                }
            };

            /** Report a syntax error at the current token */
            Scanner.prototype.syntax_error = function (errtag, args) {
                if (typeof args === "undefined") { args = null; }
                throw new Scanner.SyntaxError(errtag, args, this.line_num, this.start_char, this.char_num, this.error_chars());
            };
            Scanner.opchars = ".!#$%&*+-/:<=>?@^~";
            Scanner.letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            Scanner.digits = "0123456789";
            return Scanner;
        })();
        Funbase.Scanner = Scanner;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));

var GeomJS;
(function (GeomJS) {
    (function (Funbase) {
        (function (Scanner) {
            "use strict";

            (function (Reader) {
                function fromString(str) {
                    var index = 0;
                    return {
                        read: function () {
                            var c = str.charCodeAt(index++);
                            if (!c) {
                                return -1;
                            }
                            return c;
                        }
                    };
                }
                Reader.fromString = fromString;
            })(Scanner.Reader || (Scanner.Reader = {}));
            var Reader = Scanner.Reader;

            var SyntaxError = (function () {
                function SyntaxError(errtag, args, line, start, end, errtok) {
                    this.errtag = errtag;
                    this.args = args;
                    this.line = line;
                    this.start = start;
                    this.end = end;
                    this.errtok = errtok;
                }
                return SyntaxError;
            })();
            Scanner.SyntaxError = SyntaxError;
        })(Funbase.Scanner || (Funbase.Scanner = {}));
        var Scanner = Funbase.Scanner;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../references.ts"/>
    (function (Funbase) {
        (function (BoolValue) {
            function create(b) {
                return {
                    "type": "boolvalue",
                    "value": b,
                    "subr": Funbase.Func.nullFunction()
                };
            }
            BoolValue.create = create;
        })(Funbase.BoolValue || (Funbase.BoolValue = {}));
        var BoolValue = Funbase.BoolValue;
        (function (StringValue) {
            function create(str) {
                return {
                    "type": "string",
                    "value": str,
                    "subr": Funbase.Func.nullFunction()
                };
            }
            StringValue.create = create;
        })(Funbase.StringValue || (Funbase.StringValue = {}));
        var StringValue = Funbase.StringValue;
        (function (NumValue) {
            function create(num) {
                return {
                    "type": "number",
                    "value": num,
                    "subr": Funbase.Func.nullFunction()
                };
            }
            NumValue.create = create;
        })(Funbase.NumValue || (Funbase.NumValue = {}));
        var NumValue = Funbase.NumValue;
        (function (Value) {
            Value.nil = {
                type: "nil",
                value: [],
                subr: Funbase.Func.nullFunction()
            };
            function print(val) {
                var ret = "";
                if (val.type == "listvalue") {
                    var arr = Value.array(val);
                    ret += "[";
                    var i = 0;
                    for (; i < arr.length - 1; i++) {
                        ret += print(arr[i]);
                        ret += ", ";
                    }
                    ret += print(arr[i]);
                    ret += "]";
                } else if (val.type == "hash") {
                    ret += "<hash>";
                } else if (val.value !== undefined) {
                    ret += JSON.stringify(val.value);
                } else {
                    ret += JSON.stringify(val.name);
                }
                return ret;
            }
            Value.print = print;
            function apply(val, args) {
                return val.subr.apply(args, args.length, 0);
            }
            Value.apply = apply;

            /** Make a list from a sequence of values */
            function makeList() {
                var elems = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    elems[_i] = arguments[_i + 0];
                }
                var val = Value.nil;
                for (var i = elems.length - 1; i >= 0; i--) {
                    val = cons(elems[i], val);
                }
                return val;
            }
            Value.makeList = makeList;
            function isCons(val) {
                return val.type == "listvalue";
            }
            Value.isCons = isCons;
            function tail(val) {
                if (val.type != "listvalue") {
                    throw new Funbase.ClassCastException();
                }
                return val.tail;
            }
            Value.tail = tail;
            function cons(head, tail) {
                return {
                    type: "listvalue",
                    head: head,
                    tail: tail,
                    subr: Funbase.Func.nullFunction()
                };
            }
            Value.cons = cons;
            function array(val) {
                if (val.type != "listvalue") {
                    throw new Funbase.ClassCastException();
                }
                var elems = [];
                while (isCons(val)) {
                    elems.push(Value.head(val));
                    val = Value.tail(val);
                }

                return elems;
            }
            Value.array = array;
            function head(val) {
                if (val.type != "listvalue") {
                    throw new Funbase.ClassCastException();
                }
                return val.head;
            }
            Value.head = head;

            function string(val) {
                if (val.type != "string") {
                    throw new Funbase.ClassCastException();
                }
                return val.value;
            }
            Value.string = string;
            function number(val) {
                if (val.type != "number") {
                    throw new Funbase.ClassCastException();
                }
                return val.value;
            }
            Value.number = number;
            function funcode(val) {
                if (val.type != "funcode") {
                    //TODO: throw new ClassCastException();
                }
                return val;
            }
            Value.funcode = funcode;
            function boolean(val) {
                if (val.type != "boolvalue") {
                    throw new Funbase.ClassCastException();
                }
                return val.value;
            }
            Value.boolean = boolean;
            function name(val) {
                if (val.name === undefined) {
                    throw new Funbase.ClassCastException();
                }
                return val;
            }
            Value.name = name;
            function matchPlus(val1, val2) {
                if (val1.type != "numvalue" || val2.type != "numvalue") {
                    throw new Funbase.ClassCastException();
                }
                var inc = val2.value;
                var val = val1.value;
                var x = val - inc;
                if (inc > 0 && x >= 0 && x % 1 === 0) {
                    return NumValue.create(x);
                }
                return null;
            }
            Value.matchPlus = matchPlus;
        })(Funbase.Value || (Funbase.Value = {}));
        var Value = Funbase.Value;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../../references.ts"/>
    (function (Funbase) {
        (function (Cell) {
            function newInstance(val) {
                return {
                    type: "cell",
                    value: val,
                    subr: Funbase.Func.nullFunction()
                };
            }

            function toCell(v) {
                if (v && v.type == "cell") {
                    return v;
                } else {
                    //TODO error
                }
            }

            function install() {
                Funbase.Primitive.store("_new", function (prim, x) {
                    Funbase.Evaluator.countCons();
                    return newInstance(x);
                });
                Funbase.Primitive.store("_get", function (prim, x) {
                    return toCell(x).value;
                });
                Funbase.Primitive.store("_set", function (prim, v, y) {
                    var x = toCell(v);
                    return (x.value = y);
                });
            }
            Cell.install = install;
        })(Funbase.Cell || (Funbase.Cell = {}));
        var Cell = Funbase.Cell;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../../references.ts"/>
    (function (Funbase) {
        (function (StringPrims) {
            function install() {
                Funbase.Primitive.store("^", function (prim, x, y) {
                    return Funbase.StringValue.create(Funbase.Value.string(x) + Funbase.Value.string(y));
                });
                Funbase.Primitive.store("explode", function (prim, x) {
                    var s = Funbase.Value.string(x);
                    var result = Funbase.Value.nil;
                    for (var i = s.length - 1; i >= 0; i--)
                        result = Funbase.Value.cons(Funbase.StringValue.create(s.charAt(i)), result);
                    return result;
                });
                Funbase.Primitive.store("implode", function (prim, ys) {
                    var result = "";
                    for (var xs = ys; !(GeomJS.Common.objectEquals(xs, Funbase.Value.nil)); xs = Funbase.Value.tail(xs))
                        result += Funbase.Value.string(Funbase.Value.head(xs));
                    return Funbase.StringValue.create(result);
                });
                Funbase.Primitive.store("chr", function (prim, x, y) {
                    return Funbase.StringValue.create(String.fromCharCode(Funbase.Value.number(x)));
                });
                Funbase.Primitive.store("ord", function (prim, x, y) {
                    var s = Funbase.Value.string(x);
                    return Funbase.NumValue.create(s.length == 0 ? 0 : s.charCodeAt(0));
                });
            }
            StringPrims.install = install;
        })(Funbase.StringPrims || (Funbase.StringPrims = {}));
        var StringPrims = Funbase.StringPrims;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
///<reference path="../../references.ts"/>
var GeomJS;
(function (GeomJS) {
    (function (Funbase) {
        (function (Hash) {
            function newInstance(init) {
                if (typeof init === "undefined") { init = undefined; }
                Funbase.Evaluator.countCons();
                return {
                    type: "hash",
                    mapping: new GeomJS.Common.Map(init),
                    subr: Funbase.Func.nullFunction()
                };
            }
            function toHash(v) {
                if (v && v.type == "hash") {
                    return v;
                } else {
                    //TODO error
                }
            }

            function install() {
                Funbase.Primitive.store("_hash", function (prim) {
                    return newInstance();
                });
                Funbase.Primitive.store("_clone", function (prim, m) {
                    var h = toHash(m);
                    return newInstance(h.mapping.getIterator());
                });
                Funbase.Primitive.store("_lookup", function (prim, m, x) {
                    var r = toHash(m).mapping.get(x);
                    if (!r)
                        return Funbase.Value.nil;
                    return r;
                });
                Funbase.Primitive.store("_update", function (prim, m, x, y) {
                    var h = toHash(m);
                    h.mapping.set(x, y);
                    return y;
                });
            }
            Hash.install = install;
        })(Funbase.Hash || (Funbase.Hash = {}));
        var Hash = Funbase.Hash;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
var GeomJS;
(function (GeomJS) {
    ///<reference path="../../references.ts"/>
    (function (Funbase) {
        (function (BasicPrims) {
            function install() {
                Funbase.Primitive.store("=", function (prim, x, y) {
                    return Funbase.BoolValue.create(GeomJS.Common.objectEquals(x, y));
                });
                Funbase.Primitive.store("<>", function (prim, x, y) {
                    return Funbase.BoolValue.create(!GeomJS.Common.objectEquals(x, y));
                });
                Funbase.Primitive.store("+", function (prim, x, y) {
                    return Funbase.NumValue.create(Funbase.Value.number(x) + Funbase.Value.number(y));
                });
                Funbase.Primitive.store("-", function (prim, x, y) {
                    return Funbase.NumValue.create(Funbase.Value.number(x) - Funbase.Value.number(y));
                });
                Funbase.Primitive.store("*", function (prim, x, y) {
                    return Funbase.NumValue.create(Funbase.Value.number(x) * Funbase.Value.number(y));
                });
                Funbase.Primitive.store("/", function (prim, x, y) {
                    var yy = Funbase.Value.number(y);
                    if (yy === 0) {
                        Funbase.Evaluator.error("#divzero");
                    }
                    return Funbase.NumValue.create(Funbase.Value.number(x) / yy);
                });
                Funbase.Primitive.store("_uminus", function (prim, x) {
                    return Funbase.NumValue.create(-Funbase.Value.number(x));
                });
                Funbase.Primitive.store("<", function (prim, x, y) {
                    return Funbase.BoolValue.create(Funbase.Value.number(x) < Funbase.Value.number(y));
                });
                Funbase.Primitive.store("<=", function (prim, x, y) {
                    return Funbase.BoolValue.create(Funbase.Value.number(x) <= Funbase.Value.number(y));
                });
                Funbase.Primitive.store(">", function (prim, x, y) {
                    return Funbase.BoolValue.create(Funbase.Value.number(x) > Funbase.Value.number(y));
                });
                Funbase.Primitive.store(">=", function (prim, x, y) {
                    return Funbase.BoolValue.create(Funbase.Value.number(x) >= Funbase.Value.number(y));
                });
                Funbase.Primitive.store("numeric", function (prim, x) {
                    return Funbase.BoolValue.create(x.type === "number");
                });
                Funbase.Primitive.store("int", function (prim, x) {
                    return Funbase.NumValue.create(Math.floor(Funbase.Value.number(x)));
                });
                Funbase.Primitive.store("sqrt", function (prim, x) {
                    var arg = Funbase.Value.number(x);
                    if (arg < 0) {
                        Funbase.Evaluator.error("#sqrt");
                    }
                    return Funbase.NumValue.create(Math.sqrt(arg));
                });
                Funbase.Primitive.store("exp", function (prim, x) {
                    return Funbase.NumValue.create(Math.exp(Funbase.Value.number(x)));
                });
                Funbase.Primitive.store("sin", function (prim, x) {
                    return Funbase.NumValue.create(Math.sin(Funbase.Value.number(x) * Math.PI / 180));
                });
                Funbase.Primitive.store("cos", function (prim, x) {
                    return Funbase.NumValue.create(Math.cos(Funbase.Value.number(x) * Math.PI / 180));
                });
                Funbase.Primitive.store("tan", function (prim, x) {
                    return Funbase.NumValue.create(Math.tan(Funbase.Value.number(x) * Math.PI / 180));
                });
                Funbase.Primitive.store("atan2", function (prim, x, y) {
                    return Funbase.NumValue.create(Math.atan2(Funbase.Value.number(x), Funbase.Value.number(y)) * Math.PI / 180);
                });
                Funbase.Primitive.store("random", function (prim) {
                    return Funbase.NumValue.create(Math.random());
                });
                Funbase.Primitive.store("name", function (prim, x) {
                    return Funbase.Name.find(Funbase.Value.string(x));
                });
                Funbase.Primitive.store(":", function (prim, hd, tl) {
                    if (!Funbase.Value.isCons(tl) && !GeomJS.Common.objectEquals(tl, Funbase.Value.nil)) {
                        Funbase.Evaluator.expect(":", "a list");
                    }
                    return Funbase.Value.cons(hd, tl);
                }, function (obj, nargs) {
                    if (nargs != 2) {
                        Funbase.Evaluator.errPatNargs(name);
                    }
                    var args = [];
                    try  {
                        args[0] = Funbase.Value.tail(obj);
                        args[1] = Funbase.Value.head(obj);
                        return args;
                    } catch (e) {
                        if (e instanceof Funbase.ClassCastException) {
                            return null;
                        }
                        throw e;
                    }
                });
                Funbase.Primitive.store("head", function (prim, x) {
                    try  {
                        return Funbase.Value.head(x);
                    } catch (e) {
                        if (e instanceof Funbase.ClassCastException) {
                            Funbase.Evaluator.listFail(x, "#head");
                            return null;
                        }
                    }
                });
                Funbase.Primitive.store("tail", function (prim, x) {
                    try  {
                        return Funbase.Value.tail(x);
                    } catch (e) {
                        if (e instanceof Funbase.ClassCastException) {
                            Funbase.Evaluator.listFail(x, "#tail");
                            return null;
                        }
                    }
                });
            }
            BasicPrims.install = install;
        })(Funbase.BasicPrims || (Funbase.BasicPrims = {}));
        var BasicPrims = Funbase.BasicPrims;
    })(GeomJS.Funbase || (GeomJS.Funbase = {}));
    var Funbase = GeomJS.Funbase;
})(GeomJS || (GeomJS = {}));
///<reference path="Funbase/Primitive.ts"/>
///<reference path="Funbase/Bootstrap.ts"/>
///<reference path="Funbase/Common.ts"/>
///<reference path="Funbase/Evaluator.ts"/>
///<reference path="Funbase/Func.ts"/>
///<reference path="Funbase/FunCode.ts"/>
///<reference path="Funbase/GeomBase.ts"/>
///<reference path="Funbase/Interp.ts"/>
///<reference path="Funbase/Name.ts"/>
///<reference path="Funbase/RunScript.ts"/>
///<reference path="Funbase/Scanner.ts"/>
///<reference path="Funbase/Value.ts"/>
///<reference path="Funbase/Plugins/Cell.ts"/>
///<reference path="Funbase/Plugins/StringPrims.ts"/>
///<reference path="Funbase/Plugins/Hash.ts"/>
///<reference path="Funbase/Plugins/BasicPrims.ts"/>
///<reference path="Scripts/references.ts"/>
var app = GeomJS.Funbase.GeomBase.theApp;
GeomJS.Funbase.Name.bootstrap(GeomJS.Bootstrap.nameTable);
GeomJS.Funbase.Hash.install();
GeomJS.Funbase.Cell.install();
GeomJS.Funbase.BasicPrims.install();
GeomJS.Funbase.StringPrims.install();

function exec() {
    return geomEval(document.getElementById("input").value);
}

function geomEval(text) {
    return app.eval_loop(GeomJS.Funbase.Scanner.Reader.fromString(text), function (m) {
        return console.log(m);
    }, function (m) {
        return console.log(m);
    }, function (m) {
        return console.log(m);
    });
}

function loadCompiler() {
    var text = fs.readFileSync('compiler.txt', 'utf8');
    geomEval(text);
}

loadCompiler();
